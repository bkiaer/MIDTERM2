
MT2_transmit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  00000ffc  00001090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ffc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000109  00800122  00800122  000010b2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c36  00000000  00000000  00001268  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a5d  00000000  00000000  00002e9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ff  00000000  00000000  000038fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  000042fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000073a  00000000  00000000  00004654  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f5c  00000000  00000000  00004d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005cea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 8c 01 	jmp	0x318	; 0x318 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ef       	ldi	r30, 0xFC	; 252
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 32       	cpi	r26, 0x22	; 34
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e2       	ldi	r26, 0x22	; 34
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 32       	cpi	r26, 0x2B	; 43
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ef 00 	call	0x1de	; 0x1de <main>
  9e:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup_rf>:
			USART_tx_string(msg.data);
		}
	}
	return 0;
}
nRF24L01 *setup_rf(void) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
	nRF24L01 *rf = nRF24L01_init();
  aa:	0e 94 b6 01 	call	0x36c	; 0x36c <nRF24L01_init>
  ae:	ec 01       	movw	r28, r24

rf->ss.port = &PORTB;
  b0:	85 e2       	ldi	r24, 0x25	; 37
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	99 83       	std	Y+1, r25	; 0x01
  b6:	88 83       	st	Y, r24
rf->ss.pin = PB2;
  b8:	22 e0       	ldi	r18, 0x02	; 2
  ba:	2a 83       	std	Y+2, r18	; 0x02
rf->ce.port = &PORTB;
  bc:	9c 83       	std	Y+4, r25	; 0x04
  be:	8b 83       	std	Y+3, r24	; 0x03
rf->ce.pin = PB1;
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	2d 83       	std	Y+5, r18	; 0x05
rf->sck.port = &PORTB;
  c4:	9f 83       	std	Y+7, r25	; 0x07
  c6:	8e 83       	std	Y+6, r24	; 0x06
rf->sck.pin = PB5;
  c8:	25 e0       	ldi	r18, 0x05	; 5
  ca:	28 87       	std	Y+8, r18	; 0x08
rf->mosi.port = &PORTB;
  cc:	9a 87       	std	Y+10, r25	; 0x0a
  ce:	89 87       	std	Y+9, r24	; 0x09
rf->mosi.pin = PB3;
  d0:	23 e0       	ldi	r18, 0x03	; 3
  d2:	2b 87       	std	Y+11, r18	; 0x0b
rf->miso.port = &PORTB;
  d4:	9d 87       	std	Y+13, r25	; 0x0d
  d6:	8c 87       	std	Y+12, r24	; 0x0c
rf->miso.pin = PB4;
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	8e 87       	std	Y+14, r24	; 0x0e
// interrupt on falling edge of INT0 (PD2)
EICRA |= _BV(ISC01);
  dc:	e9 e6       	ldi	r30, 0x69	; 105
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
EIMSK |= _BV(INT0);
  e6:	e8 9a       	sbi	0x1d, 0	; 29
nRF24L01_begin(rf);
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 28 02 	call	0x450	; 0x450 <nRF24L01_begin>
return rf;
}
  ee:	ce 01       	movw	r24, r28
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <setup_timer>:
// setup timer to trigger interrupt every second when at 1MHz
void setup_timer(void) {
	TCCR1B |= _BV(WGM12);
  f6:	e1 e8       	ldi	r30, 0x81	; 129
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	88 60       	ori	r24, 0x08	; 8
  fe:	80 83       	st	Z, r24
	TIMSK1 |= _BV(OCIE1A);
 100:	af e6       	ldi	r26, 0x6F	; 111
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	8c 91       	ld	r24, X
 106:	82 60       	ori	r24, 0x02	; 2
 108:	8c 93       	st	X, r24
	OCR1A = 15624;
 10a:	88 e0       	ldi	r24, 0x08	; 8
 10c:	9d e3       	ldi	r25, 0x3D	; 61
 10e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 112:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	TCCR1B |= _BV(CS10) | _BV(CS11);
 116:	80 81       	ld	r24, Z
 118:	83 60       	ori	r24, 0x03	; 3
 11a:	80 83       	st	Z, r24
 11c:	08 95       	ret

0000011e <adc_init>:
}
void adc_init(void) //initialize ADC
{
	
	ADMUX = (0<<REFS1)| // Reference Selection Bits
 11e:	82 e4       	ldi	r24, 0x42	; 66
 120:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	(0<<ADLAR)| // ADC Left Adjust Result
	(0<<MUX2)| // ANalog Channel Selection Bits
	(1<<MUX1)| // ADC2 (PC2 PIN25)
	(0<<MUX0);

	ADCSRA = (1<<ADEN)| // ADC ENable
 124:	85 e8       	ldi	r24, 0x85	; 133
 126:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 12a:	08 95       	ret

0000012c <read_adc>:
}


void read_adc(void) {
	unsigned char i =4;
	adc_temp = 0; //initialize
 12c:	10 92 25 02 	sts	0x0225, r1	; 0x800225 <adc_temp+0x1>
 130:	10 92 24 02 	sts	0x0224, r1	; 0x800224 <adc_temp>
 134:	24 e0       	ldi	r18, 0x04	; 4
	while (i--) {
		ADCSRA |= (1<<ADSC);
 136:	ea e7       	ldi	r30, 0x7A	; 122
 138:	f0 e0       	ldi	r31, 0x00	; 0
		while(ADCSRA & (1<<ADSC));
		adc_temp+= ADC;
 13a:	a8 e7       	ldi	r26, 0x78	; 120
 13c:	b0 e0       	ldi	r27, 0x00	; 0

void read_adc(void) {
	unsigned char i =4;
	adc_temp = 0; //initialize
	while (i--) {
		ADCSRA |= (1<<ADSC);
 13e:	80 81       	ld	r24, Z
 140:	80 64       	ori	r24, 0x40	; 64
 142:	80 83       	st	Z, r24
		while(ADCSRA & (1<<ADSC));
 144:	80 81       	ld	r24, Z
 146:	86 fd       	sbrc	r24, 6
 148:	fd cf       	rjmp	.-6      	; 0x144 <read_adc+0x18>
		adc_temp+= ADC;
 14a:	4d 91       	ld	r20, X+
 14c:	5c 91       	ld	r21, X
 14e:	11 97       	sbiw	r26, 0x01	; 1
 150:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <adc_temp>
 154:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <adc_temp+0x1>
 158:	84 0f       	add	r24, r20
 15a:	95 1f       	adc	r25, r21
 15c:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <adc_temp+0x1>
 160:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <adc_temp>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 164:	3f ef       	ldi	r19, 0xFF	; 255
 166:	80 e7       	ldi	r24, 0x70	; 112
 168:	92 e0       	ldi	r25, 0x02	; 2
 16a:	31 50       	subi	r19, 0x01	; 1
 16c:	80 40       	sbci	r24, 0x00	; 0
 16e:	90 40       	sbci	r25, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <read_adc+0x3e>
 172:	00 c0       	rjmp	.+0      	; 0x174 <read_adc+0x48>
 174:	00 00       	nop
 176:	21 50       	subi	r18, 0x01	; 1


void read_adc(void) {
	unsigned char i =4;
	adc_temp = 0; //initialize
	while (i--) {
 178:	11 f7       	brne	.-60     	; 0x13e <read_adc+0x12>
		ADCSRA |= (1<<ADSC);
		while(ADCSRA & (1<<ADSC));
		adc_temp+= ADC;
		_delay_ms(50);
	}
	adc_temp = adc_temp / 4; // Average a few samples
 17a:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <adc_temp>
 17e:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <adc_temp+0x1>
 182:	96 95       	lsr	r25
 184:	87 95       	ror	r24
 186:	96 95       	lsr	r25
 188:	87 95       	ror	r24
 18a:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <adc_temp+0x1>
 18e:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <adc_temp>
 192:	08 95       	ret

00000194 <USART_init>:

}

/* INIT USART (RS-232) */
void USART_init( unsigned int ubrr ) {
	UBRR0H = (unsigned char)(ubrr>>8);
 194:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 198:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0)| ( 1 << RXCIE0); // Enable receiver, transmitter & RX interrupt
 19c:	e1 ec       	ldi	r30, 0xC1	; 193
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	88 69       	ori	r24, 0x98	; 152
 1a4:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1 << UCSZ00);
 1a6:	e2 ec       	ldi	r30, 0xC2	; 194
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	86 60       	ori	r24, 0x06	; 6
 1ae:	80 83       	st	Z, r24
 1b0:	08 95       	ret

000001b2 <USART_tx_string>:
}

void USART_tx_string( char *data ) {
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
	while ((*data != '\0')) {
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 81       	ld	r18, Z
 1ba:	22 23       	and	r18, r18
 1bc:	69 f0       	breq	.+26     	; 0x1d8 <USART_tx_string+0x26>
 1be:	dc 01       	movw	r26, r24
 1c0:	11 96       	adiw	r26, 0x01	; 1
		while (!(UCSR0A & (1 <<UDRE0)));
 1c2:	e0 ec       	ldi	r30, 0xC0	; 192
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *data;
 1c6:	c6 ec       	ldi	r28, 0xC6	; 198
 1c8:	d0 e0       	ldi	r29, 0x00	; 0
	UCSR0C |= (1<<UCSZ01) | (1 << UCSZ00);
}

void USART_tx_string( char *data ) {
	while ((*data != '\0')) {
		while (!(UCSR0A & (1 <<UDRE0)));
 1ca:	90 81       	ld	r25, Z
 1cc:	95 ff       	sbrs	r25, 5
 1ce:	fd cf       	rjmp	.-6      	; 0x1ca <USART_tx_string+0x18>
		UDR0 = *data;
 1d0:	28 83       	st	Y, r18
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0)| ( 1 << RXCIE0); // Enable receiver, transmitter & RX interrupt
	UCSR0C |= (1<<UCSZ01) | (1 << UCSZ00);
}

void USART_tx_string( char *data ) {
	while ((*data != '\0')) {
 1d2:	2d 91       	ld	r18, X+
 1d4:	21 11       	cpse	r18, r1
 1d6:	f9 cf       	rjmp	.-14     	; 0x1ca <USART_tx_string+0x18>
		while (!(UCSR0A & (1 <<UDRE0)));
		UDR0 = *data;
		data++;
	}
}
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <main>:
//char CWJAP[256];

volatile char received_data;


int main(void) {
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	a8 97       	sbiw	r28, 0x28	; 40
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
	uint8_t to_address[5] = { 0x20, 0x30, 0x40, 0x51, 0x61 };
 1f2:	85 e0       	ldi	r24, 0x05	; 5
 1f4:	e6 e0       	ldi	r30, 0x06	; 6
 1f6:	f1 e0       	ldi	r31, 0x01	; 1
 1f8:	de 01       	movw	r26, r28
 1fa:	11 96       	adiw	r26, 0x01	; 1
 1fc:	01 90       	ld	r0, Z+
 1fe:	0d 92       	st	X+, r0
 200:	8a 95       	dec	r24
 202:	e1 f7       	brne	.-8      	; 0x1fc <main+0x1e>
	bool on = false;
	adc_init(); // Initialize the ADC (Analog / Digital Converter)
 204:	0e 94 8f 00 	call	0x11e	; 0x11e <adc_init>
	USART_init(MYUBRR); // Initialize the USART (RS232 interface)
 208:	87 e6       	ldi	r24, 0x67	; 103
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 ca 00 	call	0x194	; 0x194 <USART_init>
	USART_tx_string("Connected!\r\n"); // shows theres a connection with USART
 210:	8b e0       	ldi	r24, 0x0B	; 11
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <USART_tx_string>
 218:	2f e7       	ldi	r18, 0x7F	; 127
 21a:	8a e1       	ldi	r24, 0x1A	; 26
 21c:	96 e0       	ldi	r25, 0x06	; 6
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <main+0x40>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x4a>
 228:	00 00       	nop
	_delay_ms(125); // wait a bit
	
	sei();
 22a:	78 94       	sei
	nRF24L01 *rf = setup_rf();
 22c:	0e 94 53 00 	call	0xa6	; 0xa6 <setup_rf>
 230:	7c 01       	movw	r14, r24
	setup_timer();
 232:	0e 94 7b 00 	call	0xf6	; 0xf6 <setup_timer>
volatile char received_data;


int main(void) {
	uint8_t to_address[5] = { 0x20, 0x30, 0x40, 0x51, 0x61 };
	bool on = false;
 236:	31 2c       	mov	r3, r1
			//USART_tx_string(rf);
		}
		if (send_message) {
			send_message = false;
			//USART_tx_string("Connected2!\r\n");
			on = !on;
 238:	22 24       	eor	r2, r2
 23a:	23 94       	inc	r2
			nRF24L01Message msg;
		//	USART_tx_string(&msg);
			if (on) memcpy(msg.data, "ON", 3);
			else memcpy(msg.data, "OFF", 4);
 23c:	8e 01       	movw	r16, r28
 23e:	08 5f       	subi	r16, 0xF8	; 248
 240:	1f 4f       	sbci	r17, 0xFF	; 255
 242:	0f 2e       	mov	r0, r31
 244:	ff e4       	ldi	r31, 0x4F	; 79
 246:	8f 2e       	mov	r8, r31
 248:	f6 e4       	ldi	r31, 0x46	; 70
 24a:	9f 2e       	mov	r9, r31
 24c:	f0 2d       	mov	r31, r0
 24e:	0f 2e       	mov	r0, r31
 250:	f6 e4       	ldi	r31, 0x46	; 70
 252:	6f 2e       	mov	r6, r31
 254:	71 2c       	mov	r7, r1
 256:	f0 2d       	mov	r31, r0
			send_message = false;
			//USART_tx_string("Connected2!\r\n");
			on = !on;
			nRF24L01Message msg;
		//	USART_tx_string(&msg);
			if (on) memcpy(msg.data, "ON", 3);
 258:	0f 2e       	mov	r0, r31
 25a:	ff e4       	ldi	r31, 0x4F	; 79
 25c:	4f 2e       	mov	r4, r31
 25e:	fe e4       	ldi	r31, 0x4E	; 78
 260:	5f 2e       	mov	r5, r31
 262:	f0 2d       	mov	r31, r0
			else memcpy(msg.data, "OFF", 4);
			USART_tx_string(msg.data);
			read_adc();
				snprintf(outs,sizeof(outs),"%3d F \r\n", adc_temp);// print it
 264:	0f 2e       	mov	r0, r31
 266:	f8 e1       	ldi	r31, 0x18	; 24
 268:	af 2e       	mov	r10, r31
 26a:	f1 e0       	ldi	r31, 0x01	; 1
 26c:	bf 2e       	mov	r11, r31
 26e:	f0 2d       	mov	r31, r0
 270:	0f 2e       	mov	r0, r31
 272:	f4 e2       	ldi	r31, 0x24	; 36
 274:	cf 2e       	mov	r12, r31
 276:	f1 e0       	ldi	r31, 0x01	; 1
 278:	df 2e       	mov	r13, r31
 27a:	f0 2d       	mov	r31, r0
	sei();
	nRF24L01 *rf = setup_rf();
	setup_timer();

	while (true) {
		if (rf_interrupt) {
 27c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <rf_interrupt>
 280:	88 23       	and	r24, r24
 282:	51 f0       	breq	.+20     	; 0x298 <main+0xba>
			//	USART_tx_string("Connected1!\r\n");
			rf_interrupt = false;
 284:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <rf_interrupt>
			int success = nRF24L01_transmit_success(rf);
 288:	c7 01       	movw	r24, r14
 28a:	0e 94 90 03 	call	0x720	; 0x720 <nRF24L01_transmit_success>
			if (success != 0)
 28e:	89 2b       	or	r24, r25
 290:	19 f0       	breq	.+6      	; 0x298 <main+0xba>
			nRF24L01_flush_transmit_message(rf);
 292:	c7 01       	movw	r24, r14
 294:	0e 94 0d 02 	call	0x41a	; 0x41a <nRF24L01_flush_transmit_message>
			//USART_tx_string(rf);
		}
		if (send_message) {
 298:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 29c:	88 23       	and	r24, r24
 29e:	71 f3       	breq	.-36     	; 0x27c <main+0x9e>
			send_message = false;
 2a0:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <__data_end>
			//USART_tx_string("Connected2!\r\n");
			on = !on;
 2a4:	32 24       	eor	r3, r2
			nRF24L01Message msg;
		//	USART_tx_string(&msg);
			if (on) memcpy(msg.data, "ON", 3);
 2a6:	29 f0       	breq	.+10     	; 0x2b2 <main+0xd4>
 2a8:	f8 01       	movw	r30, r16
 2aa:	51 82       	std	Z+1, r5	; 0x01
 2ac:	40 82       	st	Z, r4
 2ae:	12 82       	std	Z+2, r1	; 0x02
 2b0:	05 c0       	rjmp	.+10     	; 0x2bc <main+0xde>
			else memcpy(msg.data, "OFF", 4);
 2b2:	f8 01       	movw	r30, r16
 2b4:	91 82       	std	Z+1, r9	; 0x01
 2b6:	80 82       	st	Z, r8
 2b8:	73 82       	std	Z+3, r7	; 0x03
 2ba:	62 82       	std	Z+2, r6	; 0x02
			USART_tx_string(msg.data);
 2bc:	c8 01       	movw	r24, r16
 2be:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <USART_tx_string>
			read_adc();
 2c2:	0e 94 96 00 	call	0x12c	; 0x12c <read_adc>
				snprintf(outs,sizeof(outs),"%3d F \r\n", adc_temp);// print it
 2c6:	80 91 24 02 	lds	r24, 0x0224	; 0x800224 <adc_temp>
 2ca:	90 91 25 02 	lds	r25, 0x0225	; 0x800225 <adc_temp+0x1>
 2ce:	9f 93       	push	r25
 2d0:	8f 93       	push	r24
 2d2:	bf 92       	push	r11
 2d4:	af 92       	push	r10
 2d6:	2f 92       	push	r2
 2d8:	1f 92       	push	r1
 2da:	df 92       	push	r13
 2dc:	cf 92       	push	r12
 2de:	0e 94 04 05 	call	0xa08	; 0xa08 <snprintf>
				USART_tx_string(outs);
 2e2:	c6 01       	movw	r24, r12
 2e4:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <USART_tx_string>
			//	TCNT1 = 49911; //reset tcnt value for delay
			msg.length = strlen((char *)msg.data) + 1;
 2e8:	f8 01       	movw	r30, r16
 2ea:	01 90       	ld	r0, Z+
 2ec:	00 20       	and	r0, r0
 2ee:	e9 f7       	brne	.-6      	; 0x2ea <main+0x10c>
 2f0:	e0 1b       	sub	r30, r16
 2f2:	e8 a7       	std	Y+40, r30	; 0x28
			nRF24L01_transmit(rf, to_address, &msg);
 2f4:	ae 01       	movw	r20, r28
 2f6:	4a 5f       	subi	r20, 0xFA	; 250
 2f8:	5f 4f       	sbci	r21, 0xFF	; 255
 2fa:	be 01       	movw	r22, r28
 2fc:	6f 5f       	subi	r22, 0xFF	; 255
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
 300:	c7 01       	movw	r24, r14
 302:	0e 94 20 03 	call	0x640	; 0x640 <nRF24L01_transmit>
			USART_tx_string(msg.data);
 306:	c8 01       	movw	r24, r16
 308:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <USART_tx_string>
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	f8 94       	cli
 310:	de bf       	out	0x3e, r29	; 62
 312:	0f be       	out	0x3f, r0	; 63
 314:	cd bf       	out	0x3d, r28	; 61
 316:	b2 cf       	rjmp	.-156    	; 0x27c <main+0x9e>

00000318 <__vector_11>:
		data++;
	}
}

// each one second interrupt
ISR(TIMER1_COMPA_vect) {
 318:	1f 92       	push	r1
 31a:	0f 92       	push	r0
 31c:	0f b6       	in	r0, 0x3f	; 63
 31e:	0f 92       	push	r0
 320:	11 24       	eor	r1, r1
 322:	8f 93       	push	r24
	send_message = true;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end>
}
 32a:	8f 91       	pop	r24
 32c:	0f 90       	pop	r0
 32e:	0f be       	out	0x3f, r0	; 63
 330:	0f 90       	pop	r0
 332:	1f 90       	pop	r1
 334:	18 95       	reti

00000336 <__vector_1>:
// nRF24L01 interrupt
ISR(INT0_vect) {
 336:	1f 92       	push	r1
 338:	0f 92       	push	r0
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	8f 93       	push	r24
	rf_interrupt = true;
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <rf_interrupt>
}
 348:	8f 91       	pop	r24
 34a:	0f 90       	pop	r0
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	0f 90       	pop	r0
 350:	1f 90       	pop	r1
 352:	18 95       	reti

00000354 <copy_address>:
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
 354:	fc 01       	movw	r30, r24
 356:	a6 2f       	mov	r26, r22
 358:	b7 2f       	mov	r27, r23
 35a:	9c 01       	movw	r18, r24
 35c:	2b 5f       	subi	r18, 0xFB	; 251
 35e:	3f 4f       	sbci	r19, 0xFF	; 255
 360:	91 91       	ld	r25, Z+
 362:	9d 93       	st	X+, r25
 364:	e2 17       	cp	r30, r18
 366:	f3 07       	cpc	r31, r19
 368:	d9 f7       	brne	.-10     	; 0x360 <copy_address+0xc>
 36a:	08 95       	ret

0000036c <nRF24L01_init>:
 36c:	80 e1       	ldi	r24, 0x10	; 16
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <malloc>
 374:	20 e1       	ldi	r18, 0x10	; 16
 376:	fc 01       	movw	r30, r24
 378:	11 92       	st	Z+, r1
 37a:	2a 95       	dec	r18
 37c:	e9 f7       	brne	.-6      	; 0x378 <nRF24L01_init+0xc>
 37e:	08 95       	ret

00000380 <nRF24L01_send_command>:
 380:	cf 93       	push	r28
 382:	df 93       	push	r29
 384:	ec 01       	movw	r28, r24
 386:	da 01       	movw	r26, r20
 388:	e8 81       	ld	r30, Y
 38a:	f9 81       	ldd	r31, Y+1	; 0x01
 38c:	50 81       	ld	r21, Z
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0a 80       	ldd	r0, Y+2	; 0x02
 394:	02 c0       	rjmp	.+4      	; 0x39a <nRF24L01_send_command+0x1a>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	0a 94       	dec	r0
 39c:	e2 f7       	brpl	.-8      	; 0x396 <nRF24L01_send_command+0x16>
 39e:	80 95       	com	r24
 3a0:	85 23       	and	r24, r21
 3a2:	80 83       	st	Z, r24
 3a4:	6e bd       	out	0x2e, r22	; 46
 3a6:	0d b4       	in	r0, 0x2d	; 45
 3a8:	07 fe       	sbrs	r0, 7
 3aa:	fd cf       	rjmp	.-6      	; 0x3a6 <nRF24L01_send_command+0x26>
 3ac:	8e b5       	in	r24, 0x2e	; 46
 3ae:	8f 87       	std	Y+15, r24	; 0x0f
 3b0:	21 15       	cp	r18, r1
 3b2:	31 05       	cpc	r19, r1
 3b4:	79 f0       	breq	.+30     	; 0x3d4 <nRF24L01_send_command+0x54>
 3b6:	fd 01       	movw	r30, r26
 3b8:	2a 0f       	add	r18, r26
 3ba:	3b 1f       	adc	r19, r27
 3bc:	df 01       	movw	r26, r30
 3be:	90 81       	ld	r25, Z
 3c0:	9e bd       	out	0x2e, r25	; 46
 3c2:	0d b4       	in	r0, 0x2d	; 45
 3c4:	07 fe       	sbrs	r0, 7
 3c6:	fd cf       	rjmp	.-6      	; 0x3c2 <nRF24L01_send_command+0x42>
 3c8:	9e b5       	in	r25, 0x2e	; 46
 3ca:	9c 93       	st	X, r25
 3cc:	31 96       	adiw	r30, 0x01	; 1
 3ce:	e2 17       	cp	r30, r18
 3d0:	f3 07       	cpc	r31, r19
 3d2:	a1 f7       	brne	.-24     	; 0x3bc <nRF24L01_send_command+0x3c>
 3d4:	e8 81       	ld	r30, Y
 3d6:	f9 81       	ldd	r31, Y+1	; 0x01
 3d8:	20 81       	ld	r18, Z
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	90 e0       	ldi	r25, 0x00	; 0
 3de:	0a 80       	ldd	r0, Y+2	; 0x02
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <nRF24L01_send_command+0x66>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	0a 94       	dec	r0
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <nRF24L01_send_command+0x62>
 3ea:	82 2b       	or	r24, r18
 3ec:	80 83       	st	Z, r24
 3ee:	8f 85       	ldd	r24, Y+15	; 0x0f
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <nRF24L01_write_register>:
 3f6:	60 62       	ori	r22, 0x20	; 32
 3f8:	0e 94 c0 01 	call	0x380	; 0x380 <nRF24L01_send_command>
 3fc:	08 95       	ret

000003fe <nRF24L01_read_register>:
 3fe:	0e 94 c0 01 	call	0x380	; 0x380 <nRF24L01_send_command>
 402:	08 95       	ret

00000404 <nRF24L01_no_op>:
 404:	20 e0       	ldi	r18, 0x00	; 0
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	40 e0       	ldi	r20, 0x00	; 0
 40a:	50 e0       	ldi	r21, 0x00	; 0
 40c:	6f ef       	ldi	r22, 0xFF	; 255
 40e:	0e 94 c0 01 	call	0x380	; 0x380 <nRF24L01_send_command>
 412:	08 95       	ret

00000414 <nRF24L01_update_status>:
 414:	0e 94 02 02 	call	0x404	; 0x404 <nRF24L01_no_op>
 418:	08 95       	ret

0000041a <nRF24L01_flush_transmit_message>:
 41a:	20 e0       	ldi	r18, 0x00	; 0
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	40 e0       	ldi	r20, 0x00	; 0
 420:	50 e0       	ldi	r21, 0x00	; 0
 422:	61 ee       	ldi	r22, 0xE1	; 225
 424:	0e 94 c0 01 	call	0x380	; 0x380 <nRF24L01_send_command>
 428:	08 95       	ret

0000042a <nRF24L01_clear_interrupts>:

void nRF24L01_clear_interrupts(nRF24L01 *rf) {
 42a:	cf 93       	push	r28
 42c:	df 93       	push	r29
 42e:	1f 92       	push	r1
 430:	cd b7       	in	r28, 0x3d	; 61
 432:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
 434:	20 e7       	ldi	r18, 0x70	; 112
 436:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
 438:	21 e0       	ldi	r18, 0x01	; 1
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	ae 01       	movw	r20, r28
 43e:	4f 5f       	subi	r20, 0xFF	; 255
 440:	5f 4f       	sbci	r21, 0xFF	; 255
 442:	67 e0       	ldi	r22, 0x07	; 7
 444:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <nRF24L01_write_register>
}
 448:	0f 90       	pop	r0
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <nRF24L01_begin>:
    nRF24L01 *rf = malloc(sizeof(nRF24L01));
    memset(rf, 0, sizeof(nRF24L01));
    return rf;
}

void nRF24L01_begin(nRF24L01 *rf) {
 450:	ff 92       	push	r15
 452:	0f 93       	push	r16
 454:	1f 93       	push	r17
 456:	cf 93       	push	r28
 458:	df 93       	push	r29
 45a:	1f 92       	push	r1
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
 460:	8c 01       	movw	r16, r24
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
 462:	dc 01       	movw	r26, r24
 464:	ed 91       	ld	r30, X+
 466:	fc 91       	ld	r31, X
 468:	11 97       	sbiw	r26, 0x01	; 1
 46a:	42 91       	ld	r20, -Z
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	9c 01       	movw	r18, r24
 472:	12 96       	adiw	r26, 0x02	; 2
 474:	0c 90       	ld	r0, X
 476:	12 97       	sbiw	r26, 0x02	; 2
 478:	02 c0       	rjmp	.+4      	; 0x47e <nRF24L01_begin+0x2e>
 47a:	22 0f       	add	r18, r18
 47c:	33 1f       	adc	r19, r19
 47e:	0a 94       	dec	r0
 480:	e2 f7       	brpl	.-8      	; 0x47a <nRF24L01_begin+0x2a>
 482:	24 2b       	or	r18, r20
 484:	20 83       	st	Z, r18
 486:	13 96       	adiw	r26, 0x03	; 3
 488:	ed 91       	ld	r30, X+
 48a:	fc 91       	ld	r31, X
 48c:	14 97       	sbiw	r26, 0x04	; 4
 48e:	42 91       	ld	r20, -Z
 490:	9c 01       	movw	r18, r24
 492:	15 96       	adiw	r26, 0x05	; 5
 494:	0c 90       	ld	r0, X
 496:	15 97       	sbiw	r26, 0x05	; 5
 498:	02 c0       	rjmp	.+4      	; 0x49e <nRF24L01_begin+0x4e>
 49a:	22 0f       	add	r18, r18
 49c:	33 1f       	adc	r19, r19
 49e:	0a 94       	dec	r0
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <nRF24L01_begin+0x4a>
 4a2:	24 2b       	or	r18, r20
 4a4:	20 83       	st	Z, r18
 4a6:	ed 91       	ld	r30, X+
 4a8:	fc 91       	ld	r31, X
 4aa:	11 97       	sbiw	r26, 0x01	; 1
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
 4ac:	40 81       	ld	r20, Z
 4ae:	9c 01       	movw	r18, r24
 4b0:	12 96       	adiw	r26, 0x02	; 2
 4b2:	0c 90       	ld	r0, X
 4b4:	12 97       	sbiw	r26, 0x02	; 2
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <nRF24L01_begin+0x6c>
 4b8:	22 0f       	add	r18, r18
 4ba:	33 1f       	adc	r19, r19
 4bc:	0a 94       	dec	r0
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <nRF24L01_begin+0x68>
 4c0:	24 2b       	or	r18, r20
 4c2:	20 83       	st	Z, r18
 4c4:	13 96       	adiw	r26, 0x03	; 3
 4c6:	ed 91       	ld	r30, X+
 4c8:	fc 91       	ld	r31, X
 4ca:	14 97       	sbiw	r26, 0x04	; 4
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
 4cc:	30 81       	ld	r19, Z
 4ce:	ac 01       	movw	r20, r24
 4d0:	15 96       	adiw	r26, 0x05	; 5
 4d2:	0c 90       	ld	r0, X
 4d4:	15 97       	sbiw	r26, 0x05	; 5
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <nRF24L01_begin+0x8c>
 4d8:	44 0f       	add	r20, r20
 4da:	55 1f       	adc	r21, r21
 4dc:	0a 94       	dec	r0
 4de:	e2 f7       	brpl	.-8      	; 0x4d8 <nRF24L01_begin+0x88>
 4e0:	24 2f       	mov	r18, r20
 4e2:	20 95       	com	r18
 4e4:	23 23       	and	r18, r19
 4e6:	20 83       	st	Z, r18
}

static void spi_init(nRF24L01 *rf) {
    // set as master
    SPCR |= _BV(MSTR);
 4e8:	2c b5       	in	r18, 0x2c	; 44
 4ea:	20 61       	ori	r18, 0x10	; 16
 4ec:	2c bd       	out	0x2c, r18	; 44
    // enable SPI
    SPCR |= _BV(SPE);
 4ee:	2c b5       	in	r18, 0x2c	; 44
 4f0:	20 64       	ori	r18, 0x40	; 64
 4f2:	2c bd       	out	0x2c, r18	; 44
        destination[i] = source[i];
}

inline static void set_as_output(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr |= _BV(pin.pin);
 4f4:	16 96       	adiw	r26, 0x06	; 6
 4f6:	ed 91       	ld	r30, X+
 4f8:	fc 91       	ld	r31, X
 4fa:	17 97       	sbiw	r26, 0x07	; 7
 4fc:	42 91       	ld	r20, -Z
 4fe:	9c 01       	movw	r18, r24
 500:	18 96       	adiw	r26, 0x08	; 8
 502:	0c 90       	ld	r0, X
 504:	18 97       	sbiw	r26, 0x08	; 8
 506:	02 c0       	rjmp	.+4      	; 0x50c <nRF24L01_begin+0xbc>
 508:	22 0f       	add	r18, r18
 50a:	33 1f       	adc	r19, r19
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <nRF24L01_begin+0xb8>
 510:	24 2b       	or	r18, r20
 512:	20 83       	st	Z, r18
 514:	19 96       	adiw	r26, 0x09	; 9
 516:	ed 91       	ld	r30, X+
 518:	fc 91       	ld	r31, X
 51a:	1a 97       	sbiw	r26, 0x0a	; 10
 51c:	42 91       	ld	r20, -Z
 51e:	9c 01       	movw	r18, r24
 520:	1b 96       	adiw	r26, 0x0b	; 11
 522:	0c 90       	ld	r0, X
 524:	1b 97       	sbiw	r26, 0x0b	; 11
 526:	02 c0       	rjmp	.+4      	; 0x52c <nRF24L01_begin+0xdc>
 528:	22 0f       	add	r18, r18
 52a:	33 1f       	adc	r19, r19
 52c:	0a 94       	dec	r0
 52e:	e2 f7       	brpl	.-8      	; 0x528 <nRF24L01_begin+0xd8>
 530:	24 2b       	or	r18, r20
 532:	20 83       	st	Z, r18
}

inline static void set_as_input(gpio_pin pin) {
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
 534:	1c 96       	adiw	r26, 0x0c	; 12
 536:	ed 91       	ld	r30, X+
 538:	fc 91       	ld	r31, X
 53a:	1d 97       	sbiw	r26, 0x0d	; 13
 53c:	22 91       	ld	r18, -Z
 53e:	1e 96       	adiw	r26, 0x0e	; 14
 540:	0c 90       	ld	r0, X
 542:	02 c0       	rjmp	.+4      	; 0x548 <nRF24L01_begin+0xf8>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	0a 94       	dec	r0
 54a:	e2 f7       	brpl	.-8      	; 0x544 <nRF24L01_begin+0xf4>
 54c:	80 95       	com	r24
 54e:	82 23       	and	r24, r18
 550:	80 83       	st	Z, r24
    // MISO pin automatically overrides to input
    set_as_output(rf->sck);
    set_as_output(rf->mosi);
    set_as_input(rf->miso);
    // SPI mode 0: Clock Polarity CPOL = 0, Clock Phase CPHA = 0
    SPCR &= ~_BV(CPOL);
 552:	8c b5       	in	r24, 0x2c	; 44
 554:	87 7f       	andi	r24, 0xF7	; 247
 556:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(CPHA);
 558:	8c b5       	in	r24, 0x2c	; 44
 55a:	8b 7f       	andi	r24, 0xFB	; 251
 55c:	8c bd       	out	0x2c, r24	; 44
    // Clock 2X speed
    SPCR &= ~_BV(SPR0);
 55e:	8c b5       	in	r24, 0x2c	; 44
 560:	8e 7f       	andi	r24, 0xFE	; 254
 562:	8c bd       	out	0x2c, r24	; 44
    SPCR &= ~_BV(SPR1);
 564:	8c b5       	in	r24, 0x2c	; 44
 566:	8d 7f       	andi	r24, 0xFD	; 253
 568:	8c bd       	out	0x2c, r24	; 44
    SPSR |= _BV(SPI2X);
 56a:	8d b5       	in	r24, 0x2d	; 45
 56c:	81 60       	ori	r24, 0x01	; 1
 56e:	8d bd       	out	0x2d, r24	; 45
    // most significant first (MSB)
    SPCR &= ~_BV(DORD);
 570:	8c b5       	in	r24, 0x2c	; 44
 572:	8f 7d       	andi	r24, 0xDF	; 223
 574:	8c bd       	out	0x2c, r24	; 44
    set_high(rf->ss);
    set_low(rf->ce);

    spi_init(rf);

    nRF24L01_send_command(rf, FLUSH_RX, NULL, 0);
 576:	20 e0       	ldi	r18, 0x00	; 0
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	40 e0       	ldi	r20, 0x00	; 0
 57c:	50 e0       	ldi	r21, 0x00	; 0
 57e:	62 ee       	ldi	r22, 0xE2	; 226
 580:	c8 01       	movw	r24, r16
 582:	0e 94 c0 01 	call	0x380	; 0x380 <nRF24L01_send_command>
    nRF24L01_send_command(rf, FLUSH_TX, NULL, 0);
 586:	20 e0       	ldi	r18, 0x00	; 0
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	50 e0       	ldi	r21, 0x00	; 0
 58e:	61 ee       	ldi	r22, 0xE1	; 225
 590:	c8 01       	movw	r24, r16
 592:	0e 94 c0 01 	call	0x380	; 0x380 <nRF24L01_send_command>
    nRF24L01_clear_interrupts(rf);
 596:	c8 01       	movw	r24, r16
 598:	0e 94 15 02 	call	0x42a	; 0x42a <nRF24L01_clear_interrupts>

    uint8_t data;
    data = _BV(EN_CRC) | _BV(CRCO) | _BV(PWR_UP) | _BV(PRIM_RX);
 59c:	8f e0       	ldi	r24, 0x0F	; 15
 59e:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &data, 1);
 5a0:	21 e0       	ldi	r18, 0x01	; 1
 5a2:	30 e0       	ldi	r19, 0x00	; 0
 5a4:	ae 01       	movw	r20, r28
 5a6:	4f 5f       	subi	r20, 0xFF	; 255
 5a8:	5f 4f       	sbci	r21, 0xFF	; 255
 5aa:	60 e0       	ldi	r22, 0x00	; 0
 5ac:	c8 01       	movw	r24, r16
 5ae:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <nRF24L01_write_register>

    // enable Auto Acknowlegde on all pipes
    data = _BV(ENAA_P0) | _BV(ENAA_P1) | _BV(ENAA_P2)
 5b2:	0f 2e       	mov	r0, r31
 5b4:	ff e3       	ldi	r31, 0x3F	; 63
 5b6:	ff 2e       	mov	r15, r31
 5b8:	f0 2d       	mov	r31, r0
 5ba:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(ENAA_P3) | _BV(ENAA_P4) | _BV(ENAA_P5);
    nRF24L01_write_register(rf, EN_AA, &data, 1);
 5bc:	21 e0       	ldi	r18, 0x01	; 1
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	ae 01       	movw	r20, r28
 5c2:	4f 5f       	subi	r20, 0xFF	; 255
 5c4:	5f 4f       	sbci	r21, 0xFF	; 255
 5c6:	61 e0       	ldi	r22, 0x01	; 1
 5c8:	c8 01       	movw	r24, r16
 5ca:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <nRF24L01_write_register>

    // enable Dynamic Payload on al pipes
    data = _BV(DPL_P0) | _BV(DPL_P1) | _BV(DPL_P2)
 5ce:	f9 82       	std	Y+1, r15	; 0x01
         | _BV(DPL_P3) | _BV(DPL_P4) | _BV(DPL_P5);
    nRF24L01_write_register(rf, DYNPD, &data, 1);
 5d0:	21 e0       	ldi	r18, 0x01	; 1
 5d2:	30 e0       	ldi	r19, 0x00	; 0
 5d4:	ae 01       	movw	r20, r28
 5d6:	4f 5f       	subi	r20, 0xFF	; 255
 5d8:	5f 4f       	sbci	r21, 0xFF	; 255
 5da:	6c e1       	ldi	r22, 0x1C	; 28
 5dc:	c8 01       	movw	r24, r16
 5de:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <nRF24L01_write_register>

    // enable Dynamic Payload (global)
    data = _BV(EN_DPL);
 5e2:	84 e0       	ldi	r24, 0x04	; 4
 5e4:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, FEATURE, &data, 1);
 5e6:	21 e0       	ldi	r18, 0x01	; 1
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	ae 01       	movw	r20, r28
 5ec:	4f 5f       	subi	r20, 0xFF	; 255
 5ee:	5f 4f       	sbci	r21, 0xFF	; 255
 5f0:	6d e1       	ldi	r22, 0x1D	; 29
 5f2:	c8 01       	movw	r24, r16
 5f4:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <nRF24L01_write_register>

    // disable all rx addresses
    data = 0;
 5f8:	19 82       	std	Y+1, r1	; 0x01
    nRF24L01_write_register(rf, EN_RXADDR, &data, 1);
 5fa:	21 e0       	ldi	r18, 0x01	; 1
 5fc:	30 e0       	ldi	r19, 0x00	; 0
 5fe:	ae 01       	movw	r20, r28
 600:	4f 5f       	subi	r20, 0xFF	; 255
 602:	5f 4f       	sbci	r21, 0xFF	; 255
 604:	62 e0       	ldi	r22, 0x02	; 2
 606:	c8 01       	movw	r24, r16
 608:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <nRF24L01_write_register>
}
 60c:	0f 90       	pop	r0
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	ff 90       	pop	r15
 618:	08 95       	ret

0000061a <nRF24L01_clear_transmit_interrupts>:
void nRF24L01_clear_interrupts(nRF24L01 *rf) {
    uint8_t data = _BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT);
    nRF24L01_write_register(rf, STATUS, &data, 1);
}

void nRF24L01_clear_transmit_interrupts(nRF24L01 *rf) {
 61a:	cf 93       	push	r28
 61c:	df 93       	push	r29
 61e:	1f 92       	push	r1
 620:	cd b7       	in	r28, 0x3d	; 61
 622:	de b7       	in	r29, 0x3e	; 62
    uint8_t data = _BV(TX_DS) | _BV(MAX_RT);
 624:	20 e3       	ldi	r18, 0x30	; 48
 626:	29 83       	std	Y+1, r18	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
 628:	21 e0       	ldi	r18, 0x01	; 1
 62a:	30 e0       	ldi	r19, 0x00	; 0
 62c:	ae 01       	movw	r20, r28
 62e:	4f 5f       	subi	r20, 0xFF	; 255
 630:	5f 4f       	sbci	r21, 0xFF	; 255
 632:	67 e0       	ldi	r22, 0x07	; 7
 634:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <nRF24L01_write_register>
}
 638:	0f 90       	pop	r0
 63a:	df 91       	pop	r29
 63c:	cf 91       	pop	r28
 63e:	08 95       	ret

00000640 <nRF24L01_transmit>:
int nRF24L01_pipe_number_received(nRF24L01 *rf) {
    int pipe_number = (rf->status & RX_P_NO_MASK) >> 1;
    return pipe_number <= 5 ? pipe_number : -1;
}

void nRF24L01_transmit(nRF24L01 *rf, void *address, nRF24L01Message *msg) {
 640:	cf 92       	push	r12
 642:	df 92       	push	r13
 644:	ef 92       	push	r14
 646:	ff 92       	push	r15
 648:	0f 93       	push	r16
 64a:	1f 93       	push	r17
 64c:	cf 93       	push	r28
 64e:	df 93       	push	r29
 650:	00 d0       	rcall	.+0      	; 0x652 <nRF24L01_transmit+0x12>
 652:	00 d0       	rcall	.+0      	; 0x654 <nRF24L01_transmit+0x14>
 654:	00 d0       	rcall	.+0      	; 0x656 <nRF24L01_transmit+0x16>
 656:	cd b7       	in	r28, 0x3d	; 61
 658:	de b7       	in	r29, 0x3e	; 62
 65a:	8c 01       	movw	r16, r24
 65c:	6b 01       	movw	r12, r22
 65e:	7a 01       	movw	r14, r20
    nRF24L01_clear_transmit_interrupts(rf);
 660:	0e 94 0d 03 	call	0x61a	; 0x61a <nRF24L01_clear_transmit_interrupts>
    uint8_t addr[5];
    copy_address((uint8_t *)address, addr);
 664:	be 01       	movw	r22, r28
 666:	6f 5f       	subi	r22, 0xFF	; 255
 668:	7f 4f       	sbci	r23, 0xFF	; 255
 66a:	c6 01       	movw	r24, r12
 66c:	0e 94 aa 01 	call	0x354	; 0x354 <copy_address>
    nRF24L01_write_register(rf, TX_ADDR, addr, 5);
 670:	25 e0       	ldi	r18, 0x05	; 5
 672:	30 e0       	ldi	r19, 0x00	; 0
 674:	ae 01       	movw	r20, r28
 676:	4f 5f       	subi	r20, 0xFF	; 255
 678:	5f 4f       	sbci	r21, 0xFF	; 255
 67a:	60 e1       	ldi	r22, 0x10	; 16
 67c:	c8 01       	movw	r24, r16
 67e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <nRF24L01_write_register>
    copy_address((uint8_t *)address, addr);
 682:	be 01       	movw	r22, r28
 684:	6f 5f       	subi	r22, 0xFF	; 255
 686:	7f 4f       	sbci	r23, 0xFF	; 255
 688:	c6 01       	movw	r24, r12
 68a:	0e 94 aa 01 	call	0x354	; 0x354 <copy_address>
    nRF24L01_write_register(rf, RX_ADDR_P0, addr, 5);
 68e:	25 e0       	ldi	r18, 0x05	; 5
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	ae 01       	movw	r20, r28
 694:	4f 5f       	subi	r20, 0xFF	; 255
 696:	5f 4f       	sbci	r21, 0xFF	; 255
 698:	6a e0       	ldi	r22, 0x0A	; 10
 69a:	c8 01       	movw	r24, r16
 69c:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <nRF24L01_write_register>
    nRF24L01_send_command(rf, W_TX_PAYLOAD, &msg->data, msg->length);
 6a0:	d7 01       	movw	r26, r14
 6a2:	92 96       	adiw	r26, 0x22	; 34
 6a4:	2c 91       	ld	r18, X
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	a7 01       	movw	r20, r14
 6aa:	4e 5f       	subi	r20, 0xFE	; 254
 6ac:	5f 4f       	sbci	r21, 0xFF	; 255
 6ae:	60 ea       	ldi	r22, 0xA0	; 160
 6b0:	c8 01       	movw	r24, r16
 6b2:	0e 94 c0 01 	call	0x380	; 0x380 <nRF24L01_send_command>
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
 6b6:	21 e0       	ldi	r18, 0x01	; 1
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	ae 01       	movw	r20, r28
 6bc:	4a 5f       	subi	r20, 0xFA	; 250
 6be:	5f 4f       	sbci	r21, 0xFF	; 255
 6c0:	60 e0       	ldi	r22, 0x00	; 0
 6c2:	c8 01       	movw	r24, r16
 6c4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <nRF24L01_read_register>
    config &= ~_BV(PRIM_RX);
 6c8:	8e 81       	ldd	r24, Y+6	; 0x06
 6ca:	8e 7f       	andi	r24, 0xFE	; 254
 6cc:	8e 83       	std	Y+6, r24	; 0x06
    nRF24L01_write_register(rf, CONFIG, &config, 1);
 6ce:	21 e0       	ldi	r18, 0x01	; 1
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	ae 01       	movw	r20, r28
 6d4:	4a 5f       	subi	r20, 0xFA	; 250
 6d6:	5f 4f       	sbci	r21, 0xFF	; 255
 6d8:	60 e0       	ldi	r22, 0x00	; 0
 6da:	c8 01       	movw	r24, r16
 6dc:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <nRF24L01_write_register>
 6e0:	d8 01       	movw	r26, r16
 6e2:	13 96       	adiw	r26, 0x03	; 3
 6e4:	ed 91       	ld	r30, X+
 6e6:	fc 91       	ld	r31, X
 6e8:	14 97       	sbiw	r26, 0x04	; 4
    volatile uint8_t *ddr = pin.port - 1;
    *ddr &= ~_BV(pin.pin);
}

inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
 6ea:	20 81       	ld	r18, Z
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	15 96       	adiw	r26, 0x05	; 5
 6f2:	0c 90       	ld	r0, X
 6f4:	02 c0       	rjmp	.+4      	; 0x6fa <nRF24L01_transmit+0xba>
 6f6:	88 0f       	add	r24, r24
 6f8:	99 1f       	adc	r25, r25
 6fa:	0a 94       	dec	r0
 6fc:	e2 f7       	brpl	.-8      	; 0x6f6 <nRF24L01_transmit+0xb6>
 6fe:	82 2b       	or	r24, r18
 700:	80 83       	st	Z, r24
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config &= ~_BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    set_high(rf->ce);
}
 702:	26 96       	adiw	r28, 0x06	; 6
 704:	0f b6       	in	r0, 0x3f	; 63
 706:	f8 94       	cli
 708:	de bf       	out	0x3e, r29	; 62
 70a:	0f be       	out	0x3f, r0	; 63
 70c:	cd bf       	out	0x3d, r28	; 61
 70e:	df 91       	pop	r29
 710:	cf 91       	pop	r28
 712:	1f 91       	pop	r17
 714:	0f 91       	pop	r16
 716:	ff 90       	pop	r15
 718:	ef 90       	pop	r14
 71a:	df 90       	pop	r13
 71c:	cf 90       	pop	r12
 71e:	08 95       	ret

00000720 <nRF24L01_transmit_success>:

int nRF24L01_transmit_success(nRF24L01 *rf) {
 720:	ef 92       	push	r14
 722:	ff 92       	push	r15
 724:	0f 93       	push	r16
 726:	1f 93       	push	r17
 728:	cf 93       	push	r28
 72a:	df 93       	push	r29
 72c:	1f 92       	push	r1
 72e:	cd b7       	in	r28, 0x3d	; 61
 730:	de b7       	in	r29, 0x3e	; 62
 732:	8c 01       	movw	r16, r24
 734:	dc 01       	movw	r26, r24
 736:	13 96       	adiw	r26, 0x03	; 3
 738:	ed 91       	ld	r30, X+
 73a:	fc 91       	ld	r31, X
 73c:	14 97       	sbiw	r26, 0x04	; 4
inline static void set_high(gpio_pin pin) {
    *pin.port |= _BV(pin.pin);
}

inline static void set_low(gpio_pin pin) {
    *pin.port &= ~_BV(pin.pin);
 73e:	20 81       	ld	r18, Z
 740:	81 e0       	ldi	r24, 0x01	; 1
 742:	90 e0       	ldi	r25, 0x00	; 0
 744:	15 96       	adiw	r26, 0x05	; 5
 746:	0c 90       	ld	r0, X
 748:	02 c0       	rjmp	.+4      	; 0x74e <nRF24L01_transmit_success+0x2e>
 74a:	88 0f       	add	r24, r24
 74c:	99 1f       	adc	r25, r25
 74e:	0a 94       	dec	r0
 750:	e2 f7       	brpl	.-8      	; 0x74a <nRF24L01_transmit_success+0x2a>
 752:	80 95       	com	r24
 754:	82 23       	and	r24, r18
 756:	80 83       	st	Z, r24
    set_high(rf->ce);
}

int nRF24L01_transmit_success(nRF24L01 *rf) {
    set_low(rf->ce);
    nRF24L01_update_status(rf);
 758:	c8 01       	movw	r24, r16
 75a:	0e 94 0a 02 	call	0x414	; 0x414 <nRF24L01_update_status>
    int success;
    if (rf->status & _BV(TX_DS)) success = 0;
 75e:	f8 01       	movw	r30, r16
 760:	87 85       	ldd	r24, Z+15	; 0x0f
 762:	85 fd       	sbrc	r24, 5
 764:	09 c0       	rjmp	.+18     	; 0x778 <nRF24L01_transmit_success+0x58>
    else if (rf->status & _BV(MAX_RT)) success = -1;
 766:	84 fd       	sbrc	r24, 4
 768:	0a c0       	rjmp	.+20     	; 0x77e <nRF24L01_transmit_success+0x5e>
    else success = -2;
 76a:	0f 2e       	mov	r0, r31
 76c:	fe ef       	ldi	r31, 0xFE	; 254
 76e:	ef 2e       	mov	r14, r31
 770:	ff 24       	eor	r15, r15
 772:	fa 94       	dec	r15
 774:	f0 2d       	mov	r31, r0
 776:	06 c0       	rjmp	.+12     	; 0x784 <nRF24L01_transmit_success+0x64>

int nRF24L01_transmit_success(nRF24L01 *rf) {
    set_low(rf->ce);
    nRF24L01_update_status(rf);
    int success;
    if (rf->status & _BV(TX_DS)) success = 0;
 778:	e1 2c       	mov	r14, r1
 77a:	f1 2c       	mov	r15, r1
 77c:	03 c0       	rjmp	.+6      	; 0x784 <nRF24L01_transmit_success+0x64>
    else if (rf->status & _BV(MAX_RT)) success = -1;
 77e:	ee 24       	eor	r14, r14
 780:	ea 94       	dec	r14
 782:	fe 2c       	mov	r15, r14
    else success = -2;
    nRF24L01_clear_transmit_interrupts(rf);
 784:	c8 01       	movw	r24, r16
 786:	0e 94 0d 03 	call	0x61a	; 0x61a <nRF24L01_clear_transmit_interrupts>
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
 78a:	21 e0       	ldi	r18, 0x01	; 1
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	ae 01       	movw	r20, r28
 790:	4f 5f       	subi	r20, 0xFF	; 255
 792:	5f 4f       	sbci	r21, 0xFF	; 255
 794:	60 e0       	ldi	r22, 0x00	; 0
 796:	c8 01       	movw	r24, r16
 798:	0e 94 ff 01 	call	0x3fe	; 0x3fe <nRF24L01_read_register>
    config |= _BV(PRIM_RX);
 79c:	89 81       	ldd	r24, Y+1	; 0x01
 79e:	81 60       	ori	r24, 0x01	; 1
 7a0:	89 83       	std	Y+1, r24	; 0x01
    nRF24L01_write_register(rf, CONFIG, &config, 1);
 7a2:	21 e0       	ldi	r18, 0x01	; 1
 7a4:	30 e0       	ldi	r19, 0x00	; 0
 7a6:	ae 01       	movw	r20, r28
 7a8:	4f 5f       	subi	r20, 0xFF	; 255
 7aa:	5f 4f       	sbci	r21, 0xFF	; 255
 7ac:	60 e0       	ldi	r22, 0x00	; 0
 7ae:	c8 01       	movw	r24, r16
 7b0:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <nRF24L01_write_register>
    return success;
}
 7b4:	c7 01       	movw	r24, r14
 7b6:	0f 90       	pop	r0
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	1f 91       	pop	r17
 7be:	0f 91       	pop	r16
 7c0:	ff 90       	pop	r15
 7c2:	ef 90       	pop	r14
 7c4:	08 95       	ret

000007c6 <malloc>:
 7c6:	0f 93       	push	r16
 7c8:	1f 93       	push	r17
 7ca:	cf 93       	push	r28
 7cc:	df 93       	push	r29
 7ce:	82 30       	cpi	r24, 0x02	; 2
 7d0:	91 05       	cpc	r25, r1
 7d2:	10 f4       	brcc	.+4      	; 0x7d8 <malloc+0x12>
 7d4:	82 e0       	ldi	r24, 0x02	; 2
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <__flp>
 7dc:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <__flp+0x1>
 7e0:	20 e0       	ldi	r18, 0x00	; 0
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	a0 e0       	ldi	r26, 0x00	; 0
 7e6:	b0 e0       	ldi	r27, 0x00	; 0
 7e8:	30 97       	sbiw	r30, 0x00	; 0
 7ea:	19 f1       	breq	.+70     	; 0x832 <malloc+0x6c>
 7ec:	40 81       	ld	r20, Z
 7ee:	51 81       	ldd	r21, Z+1	; 0x01
 7f0:	02 81       	ldd	r16, Z+2	; 0x02
 7f2:	13 81       	ldd	r17, Z+3	; 0x03
 7f4:	48 17       	cp	r20, r24
 7f6:	59 07       	cpc	r21, r25
 7f8:	c8 f0       	brcs	.+50     	; 0x82c <malloc+0x66>
 7fa:	84 17       	cp	r24, r20
 7fc:	95 07       	cpc	r25, r21
 7fe:	69 f4       	brne	.+26     	; 0x81a <malloc+0x54>
 800:	10 97       	sbiw	r26, 0x00	; 0
 802:	31 f0       	breq	.+12     	; 0x810 <malloc+0x4a>
 804:	12 96       	adiw	r26, 0x02	; 2
 806:	0c 93       	st	X, r16
 808:	12 97       	sbiw	r26, 0x02	; 2
 80a:	13 96       	adiw	r26, 0x03	; 3
 80c:	1c 93       	st	X, r17
 80e:	27 c0       	rjmp	.+78     	; 0x85e <malloc+0x98>
 810:	00 93 29 02 	sts	0x0229, r16	; 0x800229 <__flp>
 814:	10 93 2a 02 	sts	0x022A, r17	; 0x80022a <__flp+0x1>
 818:	22 c0       	rjmp	.+68     	; 0x85e <malloc+0x98>
 81a:	21 15       	cp	r18, r1
 81c:	31 05       	cpc	r19, r1
 81e:	19 f0       	breq	.+6      	; 0x826 <malloc+0x60>
 820:	42 17       	cp	r20, r18
 822:	53 07       	cpc	r21, r19
 824:	18 f4       	brcc	.+6      	; 0x82c <malloc+0x66>
 826:	9a 01       	movw	r18, r20
 828:	bd 01       	movw	r22, r26
 82a:	ef 01       	movw	r28, r30
 82c:	df 01       	movw	r26, r30
 82e:	f8 01       	movw	r30, r16
 830:	db cf       	rjmp	.-74     	; 0x7e8 <malloc+0x22>
 832:	21 15       	cp	r18, r1
 834:	31 05       	cpc	r19, r1
 836:	f9 f0       	breq	.+62     	; 0x876 <malloc+0xb0>
 838:	28 1b       	sub	r18, r24
 83a:	39 0b       	sbc	r19, r25
 83c:	24 30       	cpi	r18, 0x04	; 4
 83e:	31 05       	cpc	r19, r1
 840:	80 f4       	brcc	.+32     	; 0x862 <malloc+0x9c>
 842:	8a 81       	ldd	r24, Y+2	; 0x02
 844:	9b 81       	ldd	r25, Y+3	; 0x03
 846:	61 15       	cp	r22, r1
 848:	71 05       	cpc	r23, r1
 84a:	21 f0       	breq	.+8      	; 0x854 <malloc+0x8e>
 84c:	fb 01       	movw	r30, r22
 84e:	93 83       	std	Z+3, r25	; 0x03
 850:	82 83       	std	Z+2, r24	; 0x02
 852:	04 c0       	rjmp	.+8      	; 0x85c <malloc+0x96>
 854:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <__flp+0x1>
 858:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <__flp>
 85c:	fe 01       	movw	r30, r28
 85e:	32 96       	adiw	r30, 0x02	; 2
 860:	44 c0       	rjmp	.+136    	; 0x8ea <malloc+0x124>
 862:	fe 01       	movw	r30, r28
 864:	e2 0f       	add	r30, r18
 866:	f3 1f       	adc	r31, r19
 868:	81 93       	st	Z+, r24
 86a:	91 93       	st	Z+, r25
 86c:	22 50       	subi	r18, 0x02	; 2
 86e:	31 09       	sbc	r19, r1
 870:	39 83       	std	Y+1, r19	; 0x01
 872:	28 83       	st	Y, r18
 874:	3a c0       	rjmp	.+116    	; 0x8ea <malloc+0x124>
 876:	20 91 27 02 	lds	r18, 0x0227	; 0x800227 <__brkval>
 87a:	30 91 28 02 	lds	r19, 0x0228	; 0x800228 <__brkval+0x1>
 87e:	23 2b       	or	r18, r19
 880:	41 f4       	brne	.+16     	; 0x892 <malloc+0xcc>
 882:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 886:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 88a:	30 93 28 02 	sts	0x0228, r19	; 0x800228 <__brkval+0x1>
 88e:	20 93 27 02 	sts	0x0227, r18	; 0x800227 <__brkval>
 892:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 896:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 89a:	21 15       	cp	r18, r1
 89c:	31 05       	cpc	r19, r1
 89e:	41 f4       	brne	.+16     	; 0x8b0 <malloc+0xea>
 8a0:	2d b7       	in	r18, 0x3d	; 61
 8a2:	3e b7       	in	r19, 0x3e	; 62
 8a4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 8a8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 8ac:	24 1b       	sub	r18, r20
 8ae:	35 0b       	sbc	r19, r21
 8b0:	e0 91 27 02 	lds	r30, 0x0227	; 0x800227 <__brkval>
 8b4:	f0 91 28 02 	lds	r31, 0x0228	; 0x800228 <__brkval+0x1>
 8b8:	e2 17       	cp	r30, r18
 8ba:	f3 07       	cpc	r31, r19
 8bc:	a0 f4       	brcc	.+40     	; 0x8e6 <malloc+0x120>
 8be:	2e 1b       	sub	r18, r30
 8c0:	3f 0b       	sbc	r19, r31
 8c2:	28 17       	cp	r18, r24
 8c4:	39 07       	cpc	r19, r25
 8c6:	78 f0       	brcs	.+30     	; 0x8e6 <malloc+0x120>
 8c8:	ac 01       	movw	r20, r24
 8ca:	4e 5f       	subi	r20, 0xFE	; 254
 8cc:	5f 4f       	sbci	r21, 0xFF	; 255
 8ce:	24 17       	cp	r18, r20
 8d0:	35 07       	cpc	r19, r21
 8d2:	48 f0       	brcs	.+18     	; 0x8e6 <malloc+0x120>
 8d4:	4e 0f       	add	r20, r30
 8d6:	5f 1f       	adc	r21, r31
 8d8:	50 93 28 02 	sts	0x0228, r21	; 0x800228 <__brkval+0x1>
 8dc:	40 93 27 02 	sts	0x0227, r20	; 0x800227 <__brkval>
 8e0:	81 93       	st	Z+, r24
 8e2:	91 93       	st	Z+, r25
 8e4:	02 c0       	rjmp	.+4      	; 0x8ea <malloc+0x124>
 8e6:	e0 e0       	ldi	r30, 0x00	; 0
 8e8:	f0 e0       	ldi	r31, 0x00	; 0
 8ea:	cf 01       	movw	r24, r30
 8ec:	df 91       	pop	r29
 8ee:	cf 91       	pop	r28
 8f0:	1f 91       	pop	r17
 8f2:	0f 91       	pop	r16
 8f4:	08 95       	ret

000008f6 <free>:
 8f6:	cf 93       	push	r28
 8f8:	df 93       	push	r29
 8fa:	00 97       	sbiw	r24, 0x00	; 0
 8fc:	09 f4       	brne	.+2      	; 0x900 <__stack+0x1>
 8fe:	81 c0       	rjmp	.+258    	; 0xa02 <__stack+0x103>
 900:	fc 01       	movw	r30, r24
 902:	32 97       	sbiw	r30, 0x02	; 2
 904:	13 82       	std	Z+3, r1	; 0x03
 906:	12 82       	std	Z+2, r1	; 0x02
 908:	a0 91 29 02 	lds	r26, 0x0229	; 0x800229 <__flp>
 90c:	b0 91 2a 02 	lds	r27, 0x022A	; 0x80022a <__flp+0x1>
 910:	10 97       	sbiw	r26, 0x00	; 0
 912:	81 f4       	brne	.+32     	; 0x934 <__stack+0x35>
 914:	20 81       	ld	r18, Z
 916:	31 81       	ldd	r19, Z+1	; 0x01
 918:	82 0f       	add	r24, r18
 91a:	93 1f       	adc	r25, r19
 91c:	20 91 27 02 	lds	r18, 0x0227	; 0x800227 <__brkval>
 920:	30 91 28 02 	lds	r19, 0x0228	; 0x800228 <__brkval+0x1>
 924:	28 17       	cp	r18, r24
 926:	39 07       	cpc	r19, r25
 928:	51 f5       	brne	.+84     	; 0x97e <__stack+0x7f>
 92a:	f0 93 28 02 	sts	0x0228, r31	; 0x800228 <__brkval+0x1>
 92e:	e0 93 27 02 	sts	0x0227, r30	; 0x800227 <__brkval>
 932:	67 c0       	rjmp	.+206    	; 0xa02 <__stack+0x103>
 934:	ed 01       	movw	r28, r26
 936:	20 e0       	ldi	r18, 0x00	; 0
 938:	30 e0       	ldi	r19, 0x00	; 0
 93a:	ce 17       	cp	r28, r30
 93c:	df 07       	cpc	r29, r31
 93e:	40 f4       	brcc	.+16     	; 0x950 <__stack+0x51>
 940:	4a 81       	ldd	r20, Y+2	; 0x02
 942:	5b 81       	ldd	r21, Y+3	; 0x03
 944:	9e 01       	movw	r18, r28
 946:	41 15       	cp	r20, r1
 948:	51 05       	cpc	r21, r1
 94a:	f1 f0       	breq	.+60     	; 0x988 <__stack+0x89>
 94c:	ea 01       	movw	r28, r20
 94e:	f5 cf       	rjmp	.-22     	; 0x93a <__stack+0x3b>
 950:	d3 83       	std	Z+3, r29	; 0x03
 952:	c2 83       	std	Z+2, r28	; 0x02
 954:	40 81       	ld	r20, Z
 956:	51 81       	ldd	r21, Z+1	; 0x01
 958:	84 0f       	add	r24, r20
 95a:	95 1f       	adc	r25, r21
 95c:	c8 17       	cp	r28, r24
 95e:	d9 07       	cpc	r29, r25
 960:	59 f4       	brne	.+22     	; 0x978 <__stack+0x79>
 962:	88 81       	ld	r24, Y
 964:	99 81       	ldd	r25, Y+1	; 0x01
 966:	84 0f       	add	r24, r20
 968:	95 1f       	adc	r25, r21
 96a:	02 96       	adiw	r24, 0x02	; 2
 96c:	91 83       	std	Z+1, r25	; 0x01
 96e:	80 83       	st	Z, r24
 970:	8a 81       	ldd	r24, Y+2	; 0x02
 972:	9b 81       	ldd	r25, Y+3	; 0x03
 974:	93 83       	std	Z+3, r25	; 0x03
 976:	82 83       	std	Z+2, r24	; 0x02
 978:	21 15       	cp	r18, r1
 97a:	31 05       	cpc	r19, r1
 97c:	29 f4       	brne	.+10     	; 0x988 <__stack+0x89>
 97e:	f0 93 2a 02 	sts	0x022A, r31	; 0x80022a <__flp+0x1>
 982:	e0 93 29 02 	sts	0x0229, r30	; 0x800229 <__flp>
 986:	3d c0       	rjmp	.+122    	; 0xa02 <__stack+0x103>
 988:	e9 01       	movw	r28, r18
 98a:	fb 83       	std	Y+3, r31	; 0x03
 98c:	ea 83       	std	Y+2, r30	; 0x02
 98e:	49 91       	ld	r20, Y+
 990:	59 91       	ld	r21, Y+
 992:	c4 0f       	add	r28, r20
 994:	d5 1f       	adc	r29, r21
 996:	ec 17       	cp	r30, r28
 998:	fd 07       	cpc	r31, r29
 99a:	61 f4       	brne	.+24     	; 0x9b4 <__stack+0xb5>
 99c:	80 81       	ld	r24, Z
 99e:	91 81       	ldd	r25, Z+1	; 0x01
 9a0:	84 0f       	add	r24, r20
 9a2:	95 1f       	adc	r25, r21
 9a4:	02 96       	adiw	r24, 0x02	; 2
 9a6:	e9 01       	movw	r28, r18
 9a8:	99 83       	std	Y+1, r25	; 0x01
 9aa:	88 83       	st	Y, r24
 9ac:	82 81       	ldd	r24, Z+2	; 0x02
 9ae:	93 81       	ldd	r25, Z+3	; 0x03
 9b0:	9b 83       	std	Y+3, r25	; 0x03
 9b2:	8a 83       	std	Y+2, r24	; 0x02
 9b4:	e0 e0       	ldi	r30, 0x00	; 0
 9b6:	f0 e0       	ldi	r31, 0x00	; 0
 9b8:	12 96       	adiw	r26, 0x02	; 2
 9ba:	8d 91       	ld	r24, X+
 9bc:	9c 91       	ld	r25, X
 9be:	13 97       	sbiw	r26, 0x03	; 3
 9c0:	00 97       	sbiw	r24, 0x00	; 0
 9c2:	19 f0       	breq	.+6      	; 0x9ca <__stack+0xcb>
 9c4:	fd 01       	movw	r30, r26
 9c6:	dc 01       	movw	r26, r24
 9c8:	f7 cf       	rjmp	.-18     	; 0x9b8 <__stack+0xb9>
 9ca:	8d 91       	ld	r24, X+
 9cc:	9c 91       	ld	r25, X
 9ce:	11 97       	sbiw	r26, 0x01	; 1
 9d0:	9d 01       	movw	r18, r26
 9d2:	2e 5f       	subi	r18, 0xFE	; 254
 9d4:	3f 4f       	sbci	r19, 0xFF	; 255
 9d6:	82 0f       	add	r24, r18
 9d8:	93 1f       	adc	r25, r19
 9da:	20 91 27 02 	lds	r18, 0x0227	; 0x800227 <__brkval>
 9de:	30 91 28 02 	lds	r19, 0x0228	; 0x800228 <__brkval+0x1>
 9e2:	28 17       	cp	r18, r24
 9e4:	39 07       	cpc	r19, r25
 9e6:	69 f4       	brne	.+26     	; 0xa02 <__stack+0x103>
 9e8:	30 97       	sbiw	r30, 0x00	; 0
 9ea:	29 f4       	brne	.+10     	; 0x9f6 <__stack+0xf7>
 9ec:	10 92 2a 02 	sts	0x022A, r1	; 0x80022a <__flp+0x1>
 9f0:	10 92 29 02 	sts	0x0229, r1	; 0x800229 <__flp>
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <__stack+0xfb>
 9f6:	13 82       	std	Z+3, r1	; 0x03
 9f8:	12 82       	std	Z+2, r1	; 0x02
 9fa:	b0 93 28 02 	sts	0x0228, r27	; 0x800228 <__brkval+0x1>
 9fe:	a0 93 27 02 	sts	0x0227, r26	; 0x800227 <__brkval>
 a02:	df 91       	pop	r29
 a04:	cf 91       	pop	r28
 a06:	08 95       	ret

00000a08 <snprintf>:
 a08:	ae e0       	ldi	r26, 0x0E	; 14
 a0a:	b0 e0       	ldi	r27, 0x00	; 0
 a0c:	ea e0       	ldi	r30, 0x0A	; 10
 a0e:	f5 e0       	ldi	r31, 0x05	; 5
 a10:	0c 94 d3 07 	jmp	0xfa6	; 0xfa6 <__prologue_saves__+0x1c>
 a14:	0d 89       	ldd	r16, Y+21	; 0x15
 a16:	1e 89       	ldd	r17, Y+22	; 0x16
 a18:	8f 89       	ldd	r24, Y+23	; 0x17
 a1a:	98 8d       	ldd	r25, Y+24	; 0x18
 a1c:	26 e0       	ldi	r18, 0x06	; 6
 a1e:	2c 83       	std	Y+4, r18	; 0x04
 a20:	1a 83       	std	Y+2, r17	; 0x02
 a22:	09 83       	std	Y+1, r16	; 0x01
 a24:	97 ff       	sbrs	r25, 7
 a26:	02 c0       	rjmp	.+4      	; 0xa2c <snprintf+0x24>
 a28:	80 e0       	ldi	r24, 0x00	; 0
 a2a:	90 e8       	ldi	r25, 0x80	; 128
 a2c:	01 97       	sbiw	r24, 0x01	; 1
 a2e:	9e 83       	std	Y+6, r25	; 0x06
 a30:	8d 83       	std	Y+5, r24	; 0x05
 a32:	ae 01       	movw	r20, r28
 a34:	45 5e       	subi	r20, 0xE5	; 229
 a36:	5f 4f       	sbci	r21, 0xFF	; 255
 a38:	69 8d       	ldd	r22, Y+25	; 0x19
 a3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
 a3c:	ce 01       	movw	r24, r28
 a3e:	01 96       	adiw	r24, 0x01	; 1
 a40:	0e 94 34 05 	call	0xa68	; 0xa68 <vfprintf>
 a44:	4d 81       	ldd	r20, Y+5	; 0x05
 a46:	5e 81       	ldd	r21, Y+6	; 0x06
 a48:	57 fd       	sbrc	r21, 7
 a4a:	0a c0       	rjmp	.+20     	; 0xa60 <snprintf+0x58>
 a4c:	2f 81       	ldd	r18, Y+7	; 0x07
 a4e:	38 85       	ldd	r19, Y+8	; 0x08
 a50:	42 17       	cp	r20, r18
 a52:	53 07       	cpc	r21, r19
 a54:	0c f4       	brge	.+2      	; 0xa58 <snprintf+0x50>
 a56:	9a 01       	movw	r18, r20
 a58:	f8 01       	movw	r30, r16
 a5a:	e2 0f       	add	r30, r18
 a5c:	f3 1f       	adc	r31, r19
 a5e:	10 82       	st	Z, r1
 a60:	2e 96       	adiw	r28, 0x0e	; 14
 a62:	e4 e0       	ldi	r30, 0x04	; 4
 a64:	0c 94 ef 07 	jmp	0xfde	; 0xfde <__epilogue_restores__+0x1c>

00000a68 <vfprintf>:
 a68:	ab e0       	ldi	r26, 0x0B	; 11
 a6a:	b0 e0       	ldi	r27, 0x00	; 0
 a6c:	ea e3       	ldi	r30, 0x3A	; 58
 a6e:	f5 e0       	ldi	r31, 0x05	; 5
 a70:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <__prologue_saves__>
 a74:	6c 01       	movw	r12, r24
 a76:	7b 01       	movw	r14, r22
 a78:	8a 01       	movw	r16, r20
 a7a:	fc 01       	movw	r30, r24
 a7c:	17 82       	std	Z+7, r1	; 0x07
 a7e:	16 82       	std	Z+6, r1	; 0x06
 a80:	83 81       	ldd	r24, Z+3	; 0x03
 a82:	81 ff       	sbrs	r24, 1
 a84:	cc c1       	rjmp	.+920    	; 0xe1e <vfprintf+0x3b6>
 a86:	ce 01       	movw	r24, r28
 a88:	01 96       	adiw	r24, 0x01	; 1
 a8a:	3c 01       	movw	r6, r24
 a8c:	f6 01       	movw	r30, r12
 a8e:	93 81       	ldd	r25, Z+3	; 0x03
 a90:	f7 01       	movw	r30, r14
 a92:	93 fd       	sbrc	r25, 3
 a94:	85 91       	lpm	r24, Z+
 a96:	93 ff       	sbrs	r25, 3
 a98:	81 91       	ld	r24, Z+
 a9a:	7f 01       	movw	r14, r30
 a9c:	88 23       	and	r24, r24
 a9e:	09 f4       	brne	.+2      	; 0xaa2 <vfprintf+0x3a>
 aa0:	ba c1       	rjmp	.+884    	; 0xe16 <vfprintf+0x3ae>
 aa2:	85 32       	cpi	r24, 0x25	; 37
 aa4:	39 f4       	brne	.+14     	; 0xab4 <vfprintf+0x4c>
 aa6:	93 fd       	sbrc	r25, 3
 aa8:	85 91       	lpm	r24, Z+
 aaa:	93 ff       	sbrs	r25, 3
 aac:	81 91       	ld	r24, Z+
 aae:	7f 01       	movw	r14, r30
 ab0:	85 32       	cpi	r24, 0x25	; 37
 ab2:	29 f4       	brne	.+10     	; 0xabe <vfprintf+0x56>
 ab4:	b6 01       	movw	r22, r12
 ab6:	90 e0       	ldi	r25, 0x00	; 0
 ab8:	0e 94 2b 07 	call	0xe56	; 0xe56 <fputc>
 abc:	e7 cf       	rjmp	.-50     	; 0xa8c <vfprintf+0x24>
 abe:	91 2c       	mov	r9, r1
 ac0:	21 2c       	mov	r2, r1
 ac2:	31 2c       	mov	r3, r1
 ac4:	ff e1       	ldi	r31, 0x1F	; 31
 ac6:	f3 15       	cp	r31, r3
 ac8:	d8 f0       	brcs	.+54     	; 0xb00 <vfprintf+0x98>
 aca:	8b 32       	cpi	r24, 0x2B	; 43
 acc:	79 f0       	breq	.+30     	; 0xaec <vfprintf+0x84>
 ace:	38 f4       	brcc	.+14     	; 0xade <vfprintf+0x76>
 ad0:	80 32       	cpi	r24, 0x20	; 32
 ad2:	79 f0       	breq	.+30     	; 0xaf2 <vfprintf+0x8a>
 ad4:	83 32       	cpi	r24, 0x23	; 35
 ad6:	a1 f4       	brne	.+40     	; 0xb00 <vfprintf+0x98>
 ad8:	23 2d       	mov	r18, r3
 ada:	20 61       	ori	r18, 0x10	; 16
 adc:	1d c0       	rjmp	.+58     	; 0xb18 <vfprintf+0xb0>
 ade:	8d 32       	cpi	r24, 0x2D	; 45
 ae0:	61 f0       	breq	.+24     	; 0xafa <vfprintf+0x92>
 ae2:	80 33       	cpi	r24, 0x30	; 48
 ae4:	69 f4       	brne	.+26     	; 0xb00 <vfprintf+0x98>
 ae6:	23 2d       	mov	r18, r3
 ae8:	21 60       	ori	r18, 0x01	; 1
 aea:	16 c0       	rjmp	.+44     	; 0xb18 <vfprintf+0xb0>
 aec:	83 2d       	mov	r24, r3
 aee:	82 60       	ori	r24, 0x02	; 2
 af0:	38 2e       	mov	r3, r24
 af2:	e3 2d       	mov	r30, r3
 af4:	e4 60       	ori	r30, 0x04	; 4
 af6:	3e 2e       	mov	r3, r30
 af8:	2a c0       	rjmp	.+84     	; 0xb4e <vfprintf+0xe6>
 afa:	f3 2d       	mov	r31, r3
 afc:	f8 60       	ori	r31, 0x08	; 8
 afe:	1d c0       	rjmp	.+58     	; 0xb3a <vfprintf+0xd2>
 b00:	37 fc       	sbrc	r3, 7
 b02:	2d c0       	rjmp	.+90     	; 0xb5e <vfprintf+0xf6>
 b04:	20 ed       	ldi	r18, 0xD0	; 208
 b06:	28 0f       	add	r18, r24
 b08:	2a 30       	cpi	r18, 0x0A	; 10
 b0a:	40 f0       	brcs	.+16     	; 0xb1c <vfprintf+0xb4>
 b0c:	8e 32       	cpi	r24, 0x2E	; 46
 b0e:	b9 f4       	brne	.+46     	; 0xb3e <vfprintf+0xd6>
 b10:	36 fc       	sbrc	r3, 6
 b12:	81 c1       	rjmp	.+770    	; 0xe16 <vfprintf+0x3ae>
 b14:	23 2d       	mov	r18, r3
 b16:	20 64       	ori	r18, 0x40	; 64
 b18:	32 2e       	mov	r3, r18
 b1a:	19 c0       	rjmp	.+50     	; 0xb4e <vfprintf+0xe6>
 b1c:	36 fe       	sbrs	r3, 6
 b1e:	06 c0       	rjmp	.+12     	; 0xb2c <vfprintf+0xc4>
 b20:	8a e0       	ldi	r24, 0x0A	; 10
 b22:	98 9e       	mul	r9, r24
 b24:	20 0d       	add	r18, r0
 b26:	11 24       	eor	r1, r1
 b28:	92 2e       	mov	r9, r18
 b2a:	11 c0       	rjmp	.+34     	; 0xb4e <vfprintf+0xe6>
 b2c:	ea e0       	ldi	r30, 0x0A	; 10
 b2e:	2e 9e       	mul	r2, r30
 b30:	20 0d       	add	r18, r0
 b32:	11 24       	eor	r1, r1
 b34:	22 2e       	mov	r2, r18
 b36:	f3 2d       	mov	r31, r3
 b38:	f0 62       	ori	r31, 0x20	; 32
 b3a:	3f 2e       	mov	r3, r31
 b3c:	08 c0       	rjmp	.+16     	; 0xb4e <vfprintf+0xe6>
 b3e:	8c 36       	cpi	r24, 0x6C	; 108
 b40:	21 f4       	brne	.+8      	; 0xb4a <vfprintf+0xe2>
 b42:	83 2d       	mov	r24, r3
 b44:	80 68       	ori	r24, 0x80	; 128
 b46:	38 2e       	mov	r3, r24
 b48:	02 c0       	rjmp	.+4      	; 0xb4e <vfprintf+0xe6>
 b4a:	88 36       	cpi	r24, 0x68	; 104
 b4c:	41 f4       	brne	.+16     	; 0xb5e <vfprintf+0xf6>
 b4e:	f7 01       	movw	r30, r14
 b50:	93 fd       	sbrc	r25, 3
 b52:	85 91       	lpm	r24, Z+
 b54:	93 ff       	sbrs	r25, 3
 b56:	81 91       	ld	r24, Z+
 b58:	7f 01       	movw	r14, r30
 b5a:	81 11       	cpse	r24, r1
 b5c:	b3 cf       	rjmp	.-154    	; 0xac4 <vfprintf+0x5c>
 b5e:	98 2f       	mov	r25, r24
 b60:	9f 7d       	andi	r25, 0xDF	; 223
 b62:	95 54       	subi	r25, 0x45	; 69
 b64:	93 30       	cpi	r25, 0x03	; 3
 b66:	28 f4       	brcc	.+10     	; 0xb72 <vfprintf+0x10a>
 b68:	0c 5f       	subi	r16, 0xFC	; 252
 b6a:	1f 4f       	sbci	r17, 0xFF	; 255
 b6c:	9f e3       	ldi	r25, 0x3F	; 63
 b6e:	99 83       	std	Y+1, r25	; 0x01
 b70:	0d c0       	rjmp	.+26     	; 0xb8c <vfprintf+0x124>
 b72:	83 36       	cpi	r24, 0x63	; 99
 b74:	31 f0       	breq	.+12     	; 0xb82 <vfprintf+0x11a>
 b76:	83 37       	cpi	r24, 0x73	; 115
 b78:	71 f0       	breq	.+28     	; 0xb96 <vfprintf+0x12e>
 b7a:	83 35       	cpi	r24, 0x53	; 83
 b7c:	09 f0       	breq	.+2      	; 0xb80 <vfprintf+0x118>
 b7e:	59 c0       	rjmp	.+178    	; 0xc32 <vfprintf+0x1ca>
 b80:	21 c0       	rjmp	.+66     	; 0xbc4 <vfprintf+0x15c>
 b82:	f8 01       	movw	r30, r16
 b84:	80 81       	ld	r24, Z
 b86:	89 83       	std	Y+1, r24	; 0x01
 b88:	0e 5f       	subi	r16, 0xFE	; 254
 b8a:	1f 4f       	sbci	r17, 0xFF	; 255
 b8c:	88 24       	eor	r8, r8
 b8e:	83 94       	inc	r8
 b90:	91 2c       	mov	r9, r1
 b92:	53 01       	movw	r10, r6
 b94:	13 c0       	rjmp	.+38     	; 0xbbc <vfprintf+0x154>
 b96:	28 01       	movw	r4, r16
 b98:	f2 e0       	ldi	r31, 0x02	; 2
 b9a:	4f 0e       	add	r4, r31
 b9c:	51 1c       	adc	r5, r1
 b9e:	f8 01       	movw	r30, r16
 ba0:	a0 80       	ld	r10, Z
 ba2:	b1 80       	ldd	r11, Z+1	; 0x01
 ba4:	36 fe       	sbrs	r3, 6
 ba6:	03 c0       	rjmp	.+6      	; 0xbae <vfprintf+0x146>
 ba8:	69 2d       	mov	r22, r9
 baa:	70 e0       	ldi	r23, 0x00	; 0
 bac:	02 c0       	rjmp	.+4      	; 0xbb2 <vfprintf+0x14a>
 bae:	6f ef       	ldi	r22, 0xFF	; 255
 bb0:	7f ef       	ldi	r23, 0xFF	; 255
 bb2:	c5 01       	movw	r24, r10
 bb4:	0e 94 20 07 	call	0xe40	; 0xe40 <strnlen>
 bb8:	4c 01       	movw	r8, r24
 bba:	82 01       	movw	r16, r4
 bbc:	f3 2d       	mov	r31, r3
 bbe:	ff 77       	andi	r31, 0x7F	; 127
 bc0:	3f 2e       	mov	r3, r31
 bc2:	16 c0       	rjmp	.+44     	; 0xbf0 <vfprintf+0x188>
 bc4:	28 01       	movw	r4, r16
 bc6:	22 e0       	ldi	r18, 0x02	; 2
 bc8:	42 0e       	add	r4, r18
 bca:	51 1c       	adc	r5, r1
 bcc:	f8 01       	movw	r30, r16
 bce:	a0 80       	ld	r10, Z
 bd0:	b1 80       	ldd	r11, Z+1	; 0x01
 bd2:	36 fe       	sbrs	r3, 6
 bd4:	03 c0       	rjmp	.+6      	; 0xbdc <vfprintf+0x174>
 bd6:	69 2d       	mov	r22, r9
 bd8:	70 e0       	ldi	r23, 0x00	; 0
 bda:	02 c0       	rjmp	.+4      	; 0xbe0 <vfprintf+0x178>
 bdc:	6f ef       	ldi	r22, 0xFF	; 255
 bde:	7f ef       	ldi	r23, 0xFF	; 255
 be0:	c5 01       	movw	r24, r10
 be2:	0e 94 15 07 	call	0xe2a	; 0xe2a <strnlen_P>
 be6:	4c 01       	movw	r8, r24
 be8:	f3 2d       	mov	r31, r3
 bea:	f0 68       	ori	r31, 0x80	; 128
 bec:	3f 2e       	mov	r3, r31
 bee:	82 01       	movw	r16, r4
 bf0:	33 fc       	sbrc	r3, 3
 bf2:	1b c0       	rjmp	.+54     	; 0xc2a <vfprintf+0x1c2>
 bf4:	82 2d       	mov	r24, r2
 bf6:	90 e0       	ldi	r25, 0x00	; 0
 bf8:	88 16       	cp	r8, r24
 bfa:	99 06       	cpc	r9, r25
 bfc:	b0 f4       	brcc	.+44     	; 0xc2a <vfprintf+0x1c2>
 bfe:	b6 01       	movw	r22, r12
 c00:	80 e2       	ldi	r24, 0x20	; 32
 c02:	90 e0       	ldi	r25, 0x00	; 0
 c04:	0e 94 2b 07 	call	0xe56	; 0xe56 <fputc>
 c08:	2a 94       	dec	r2
 c0a:	f4 cf       	rjmp	.-24     	; 0xbf4 <vfprintf+0x18c>
 c0c:	f5 01       	movw	r30, r10
 c0e:	37 fc       	sbrc	r3, 7
 c10:	85 91       	lpm	r24, Z+
 c12:	37 fe       	sbrs	r3, 7
 c14:	81 91       	ld	r24, Z+
 c16:	5f 01       	movw	r10, r30
 c18:	b6 01       	movw	r22, r12
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	0e 94 2b 07 	call	0xe56	; 0xe56 <fputc>
 c20:	21 10       	cpse	r2, r1
 c22:	2a 94       	dec	r2
 c24:	21 e0       	ldi	r18, 0x01	; 1
 c26:	82 1a       	sub	r8, r18
 c28:	91 08       	sbc	r9, r1
 c2a:	81 14       	cp	r8, r1
 c2c:	91 04       	cpc	r9, r1
 c2e:	71 f7       	brne	.-36     	; 0xc0c <vfprintf+0x1a4>
 c30:	e8 c0       	rjmp	.+464    	; 0xe02 <vfprintf+0x39a>
 c32:	84 36       	cpi	r24, 0x64	; 100
 c34:	11 f0       	breq	.+4      	; 0xc3a <vfprintf+0x1d2>
 c36:	89 36       	cpi	r24, 0x69	; 105
 c38:	41 f5       	brne	.+80     	; 0xc8a <vfprintf+0x222>
 c3a:	f8 01       	movw	r30, r16
 c3c:	37 fe       	sbrs	r3, 7
 c3e:	07 c0       	rjmp	.+14     	; 0xc4e <vfprintf+0x1e6>
 c40:	60 81       	ld	r22, Z
 c42:	71 81       	ldd	r23, Z+1	; 0x01
 c44:	82 81       	ldd	r24, Z+2	; 0x02
 c46:	93 81       	ldd	r25, Z+3	; 0x03
 c48:	0c 5f       	subi	r16, 0xFC	; 252
 c4a:	1f 4f       	sbci	r17, 0xFF	; 255
 c4c:	08 c0       	rjmp	.+16     	; 0xc5e <vfprintf+0x1f6>
 c4e:	60 81       	ld	r22, Z
 c50:	71 81       	ldd	r23, Z+1	; 0x01
 c52:	07 2e       	mov	r0, r23
 c54:	00 0c       	add	r0, r0
 c56:	88 0b       	sbc	r24, r24
 c58:	99 0b       	sbc	r25, r25
 c5a:	0e 5f       	subi	r16, 0xFE	; 254
 c5c:	1f 4f       	sbci	r17, 0xFF	; 255
 c5e:	f3 2d       	mov	r31, r3
 c60:	ff 76       	andi	r31, 0x6F	; 111
 c62:	3f 2e       	mov	r3, r31
 c64:	97 ff       	sbrs	r25, 7
 c66:	09 c0       	rjmp	.+18     	; 0xc7a <vfprintf+0x212>
 c68:	90 95       	com	r25
 c6a:	80 95       	com	r24
 c6c:	70 95       	com	r23
 c6e:	61 95       	neg	r22
 c70:	7f 4f       	sbci	r23, 0xFF	; 255
 c72:	8f 4f       	sbci	r24, 0xFF	; 255
 c74:	9f 4f       	sbci	r25, 0xFF	; 255
 c76:	f0 68       	ori	r31, 0x80	; 128
 c78:	3f 2e       	mov	r3, r31
 c7a:	2a e0       	ldi	r18, 0x0A	; 10
 c7c:	30 e0       	ldi	r19, 0x00	; 0
 c7e:	a3 01       	movw	r20, r6
 c80:	0e 94 67 07 	call	0xece	; 0xece <__ultoa_invert>
 c84:	88 2e       	mov	r8, r24
 c86:	86 18       	sub	r8, r6
 c88:	45 c0       	rjmp	.+138    	; 0xd14 <vfprintf+0x2ac>
 c8a:	85 37       	cpi	r24, 0x75	; 117
 c8c:	31 f4       	brne	.+12     	; 0xc9a <vfprintf+0x232>
 c8e:	23 2d       	mov	r18, r3
 c90:	2f 7e       	andi	r18, 0xEF	; 239
 c92:	b2 2e       	mov	r11, r18
 c94:	2a e0       	ldi	r18, 0x0A	; 10
 c96:	30 e0       	ldi	r19, 0x00	; 0
 c98:	25 c0       	rjmp	.+74     	; 0xce4 <vfprintf+0x27c>
 c9a:	93 2d       	mov	r25, r3
 c9c:	99 7f       	andi	r25, 0xF9	; 249
 c9e:	b9 2e       	mov	r11, r25
 ca0:	8f 36       	cpi	r24, 0x6F	; 111
 ca2:	c1 f0       	breq	.+48     	; 0xcd4 <vfprintf+0x26c>
 ca4:	18 f4       	brcc	.+6      	; 0xcac <vfprintf+0x244>
 ca6:	88 35       	cpi	r24, 0x58	; 88
 ca8:	79 f0       	breq	.+30     	; 0xcc8 <vfprintf+0x260>
 caa:	b5 c0       	rjmp	.+362    	; 0xe16 <vfprintf+0x3ae>
 cac:	80 37       	cpi	r24, 0x70	; 112
 cae:	19 f0       	breq	.+6      	; 0xcb6 <vfprintf+0x24e>
 cb0:	88 37       	cpi	r24, 0x78	; 120
 cb2:	21 f0       	breq	.+8      	; 0xcbc <vfprintf+0x254>
 cb4:	b0 c0       	rjmp	.+352    	; 0xe16 <vfprintf+0x3ae>
 cb6:	e9 2f       	mov	r30, r25
 cb8:	e0 61       	ori	r30, 0x10	; 16
 cba:	be 2e       	mov	r11, r30
 cbc:	b4 fe       	sbrs	r11, 4
 cbe:	0d c0       	rjmp	.+26     	; 0xcda <vfprintf+0x272>
 cc0:	fb 2d       	mov	r31, r11
 cc2:	f4 60       	ori	r31, 0x04	; 4
 cc4:	bf 2e       	mov	r11, r31
 cc6:	09 c0       	rjmp	.+18     	; 0xcda <vfprintf+0x272>
 cc8:	34 fe       	sbrs	r3, 4
 cca:	0a c0       	rjmp	.+20     	; 0xce0 <vfprintf+0x278>
 ccc:	29 2f       	mov	r18, r25
 cce:	26 60       	ori	r18, 0x06	; 6
 cd0:	b2 2e       	mov	r11, r18
 cd2:	06 c0       	rjmp	.+12     	; 0xce0 <vfprintf+0x278>
 cd4:	28 e0       	ldi	r18, 0x08	; 8
 cd6:	30 e0       	ldi	r19, 0x00	; 0
 cd8:	05 c0       	rjmp	.+10     	; 0xce4 <vfprintf+0x27c>
 cda:	20 e1       	ldi	r18, 0x10	; 16
 cdc:	30 e0       	ldi	r19, 0x00	; 0
 cde:	02 c0       	rjmp	.+4      	; 0xce4 <vfprintf+0x27c>
 ce0:	20 e1       	ldi	r18, 0x10	; 16
 ce2:	32 e0       	ldi	r19, 0x02	; 2
 ce4:	f8 01       	movw	r30, r16
 ce6:	b7 fe       	sbrs	r11, 7
 ce8:	07 c0       	rjmp	.+14     	; 0xcf8 <vfprintf+0x290>
 cea:	60 81       	ld	r22, Z
 cec:	71 81       	ldd	r23, Z+1	; 0x01
 cee:	82 81       	ldd	r24, Z+2	; 0x02
 cf0:	93 81       	ldd	r25, Z+3	; 0x03
 cf2:	0c 5f       	subi	r16, 0xFC	; 252
 cf4:	1f 4f       	sbci	r17, 0xFF	; 255
 cf6:	06 c0       	rjmp	.+12     	; 0xd04 <vfprintf+0x29c>
 cf8:	60 81       	ld	r22, Z
 cfa:	71 81       	ldd	r23, Z+1	; 0x01
 cfc:	80 e0       	ldi	r24, 0x00	; 0
 cfe:	90 e0       	ldi	r25, 0x00	; 0
 d00:	0e 5f       	subi	r16, 0xFE	; 254
 d02:	1f 4f       	sbci	r17, 0xFF	; 255
 d04:	a3 01       	movw	r20, r6
 d06:	0e 94 67 07 	call	0xece	; 0xece <__ultoa_invert>
 d0a:	88 2e       	mov	r8, r24
 d0c:	86 18       	sub	r8, r6
 d0e:	fb 2d       	mov	r31, r11
 d10:	ff 77       	andi	r31, 0x7F	; 127
 d12:	3f 2e       	mov	r3, r31
 d14:	36 fe       	sbrs	r3, 6
 d16:	0d c0       	rjmp	.+26     	; 0xd32 <vfprintf+0x2ca>
 d18:	23 2d       	mov	r18, r3
 d1a:	2e 7f       	andi	r18, 0xFE	; 254
 d1c:	a2 2e       	mov	r10, r18
 d1e:	89 14       	cp	r8, r9
 d20:	58 f4       	brcc	.+22     	; 0xd38 <vfprintf+0x2d0>
 d22:	34 fe       	sbrs	r3, 4
 d24:	0b c0       	rjmp	.+22     	; 0xd3c <vfprintf+0x2d4>
 d26:	32 fc       	sbrc	r3, 2
 d28:	09 c0       	rjmp	.+18     	; 0xd3c <vfprintf+0x2d4>
 d2a:	83 2d       	mov	r24, r3
 d2c:	8e 7e       	andi	r24, 0xEE	; 238
 d2e:	a8 2e       	mov	r10, r24
 d30:	05 c0       	rjmp	.+10     	; 0xd3c <vfprintf+0x2d4>
 d32:	b8 2c       	mov	r11, r8
 d34:	a3 2c       	mov	r10, r3
 d36:	03 c0       	rjmp	.+6      	; 0xd3e <vfprintf+0x2d6>
 d38:	b8 2c       	mov	r11, r8
 d3a:	01 c0       	rjmp	.+2      	; 0xd3e <vfprintf+0x2d6>
 d3c:	b9 2c       	mov	r11, r9
 d3e:	a4 fe       	sbrs	r10, 4
 d40:	0f c0       	rjmp	.+30     	; 0xd60 <vfprintf+0x2f8>
 d42:	fe 01       	movw	r30, r28
 d44:	e8 0d       	add	r30, r8
 d46:	f1 1d       	adc	r31, r1
 d48:	80 81       	ld	r24, Z
 d4a:	80 33       	cpi	r24, 0x30	; 48
 d4c:	21 f4       	brne	.+8      	; 0xd56 <vfprintf+0x2ee>
 d4e:	9a 2d       	mov	r25, r10
 d50:	99 7e       	andi	r25, 0xE9	; 233
 d52:	a9 2e       	mov	r10, r25
 d54:	09 c0       	rjmp	.+18     	; 0xd68 <vfprintf+0x300>
 d56:	a2 fe       	sbrs	r10, 2
 d58:	06 c0       	rjmp	.+12     	; 0xd66 <vfprintf+0x2fe>
 d5a:	b3 94       	inc	r11
 d5c:	b3 94       	inc	r11
 d5e:	04 c0       	rjmp	.+8      	; 0xd68 <vfprintf+0x300>
 d60:	8a 2d       	mov	r24, r10
 d62:	86 78       	andi	r24, 0x86	; 134
 d64:	09 f0       	breq	.+2      	; 0xd68 <vfprintf+0x300>
 d66:	b3 94       	inc	r11
 d68:	a3 fc       	sbrc	r10, 3
 d6a:	11 c0       	rjmp	.+34     	; 0xd8e <vfprintf+0x326>
 d6c:	a0 fe       	sbrs	r10, 0
 d6e:	06 c0       	rjmp	.+12     	; 0xd7c <vfprintf+0x314>
 d70:	b2 14       	cp	r11, r2
 d72:	88 f4       	brcc	.+34     	; 0xd96 <vfprintf+0x32e>
 d74:	28 0c       	add	r2, r8
 d76:	92 2c       	mov	r9, r2
 d78:	9b 18       	sub	r9, r11
 d7a:	0e c0       	rjmp	.+28     	; 0xd98 <vfprintf+0x330>
 d7c:	b2 14       	cp	r11, r2
 d7e:	60 f4       	brcc	.+24     	; 0xd98 <vfprintf+0x330>
 d80:	b6 01       	movw	r22, r12
 d82:	80 e2       	ldi	r24, 0x20	; 32
 d84:	90 e0       	ldi	r25, 0x00	; 0
 d86:	0e 94 2b 07 	call	0xe56	; 0xe56 <fputc>
 d8a:	b3 94       	inc	r11
 d8c:	f7 cf       	rjmp	.-18     	; 0xd7c <vfprintf+0x314>
 d8e:	b2 14       	cp	r11, r2
 d90:	18 f4       	brcc	.+6      	; 0xd98 <vfprintf+0x330>
 d92:	2b 18       	sub	r2, r11
 d94:	02 c0       	rjmp	.+4      	; 0xd9a <vfprintf+0x332>
 d96:	98 2c       	mov	r9, r8
 d98:	21 2c       	mov	r2, r1
 d9a:	a4 fe       	sbrs	r10, 4
 d9c:	10 c0       	rjmp	.+32     	; 0xdbe <vfprintf+0x356>
 d9e:	b6 01       	movw	r22, r12
 da0:	80 e3       	ldi	r24, 0x30	; 48
 da2:	90 e0       	ldi	r25, 0x00	; 0
 da4:	0e 94 2b 07 	call	0xe56	; 0xe56 <fputc>
 da8:	a2 fe       	sbrs	r10, 2
 daa:	17 c0       	rjmp	.+46     	; 0xdda <vfprintf+0x372>
 dac:	a1 fc       	sbrc	r10, 1
 dae:	03 c0       	rjmp	.+6      	; 0xdb6 <vfprintf+0x34e>
 db0:	88 e7       	ldi	r24, 0x78	; 120
 db2:	90 e0       	ldi	r25, 0x00	; 0
 db4:	02 c0       	rjmp	.+4      	; 0xdba <vfprintf+0x352>
 db6:	88 e5       	ldi	r24, 0x58	; 88
 db8:	90 e0       	ldi	r25, 0x00	; 0
 dba:	b6 01       	movw	r22, r12
 dbc:	0c c0       	rjmp	.+24     	; 0xdd6 <vfprintf+0x36e>
 dbe:	8a 2d       	mov	r24, r10
 dc0:	86 78       	andi	r24, 0x86	; 134
 dc2:	59 f0       	breq	.+22     	; 0xdda <vfprintf+0x372>
 dc4:	a1 fe       	sbrs	r10, 1
 dc6:	02 c0       	rjmp	.+4      	; 0xdcc <vfprintf+0x364>
 dc8:	8b e2       	ldi	r24, 0x2B	; 43
 dca:	01 c0       	rjmp	.+2      	; 0xdce <vfprintf+0x366>
 dcc:	80 e2       	ldi	r24, 0x20	; 32
 dce:	a7 fc       	sbrc	r10, 7
 dd0:	8d e2       	ldi	r24, 0x2D	; 45
 dd2:	b6 01       	movw	r22, r12
 dd4:	90 e0       	ldi	r25, 0x00	; 0
 dd6:	0e 94 2b 07 	call	0xe56	; 0xe56 <fputc>
 dda:	89 14       	cp	r8, r9
 ddc:	38 f4       	brcc	.+14     	; 0xdec <vfprintf+0x384>
 dde:	b6 01       	movw	r22, r12
 de0:	80 e3       	ldi	r24, 0x30	; 48
 de2:	90 e0       	ldi	r25, 0x00	; 0
 de4:	0e 94 2b 07 	call	0xe56	; 0xe56 <fputc>
 de8:	9a 94       	dec	r9
 dea:	f7 cf       	rjmp	.-18     	; 0xdda <vfprintf+0x372>
 dec:	8a 94       	dec	r8
 dee:	f3 01       	movw	r30, r6
 df0:	e8 0d       	add	r30, r8
 df2:	f1 1d       	adc	r31, r1
 df4:	80 81       	ld	r24, Z
 df6:	b6 01       	movw	r22, r12
 df8:	90 e0       	ldi	r25, 0x00	; 0
 dfa:	0e 94 2b 07 	call	0xe56	; 0xe56 <fputc>
 dfe:	81 10       	cpse	r8, r1
 e00:	f5 cf       	rjmp	.-22     	; 0xdec <vfprintf+0x384>
 e02:	22 20       	and	r2, r2
 e04:	09 f4       	brne	.+2      	; 0xe08 <vfprintf+0x3a0>
 e06:	42 ce       	rjmp	.-892    	; 0xa8c <vfprintf+0x24>
 e08:	b6 01       	movw	r22, r12
 e0a:	80 e2       	ldi	r24, 0x20	; 32
 e0c:	90 e0       	ldi	r25, 0x00	; 0
 e0e:	0e 94 2b 07 	call	0xe56	; 0xe56 <fputc>
 e12:	2a 94       	dec	r2
 e14:	f6 cf       	rjmp	.-20     	; 0xe02 <vfprintf+0x39a>
 e16:	f6 01       	movw	r30, r12
 e18:	86 81       	ldd	r24, Z+6	; 0x06
 e1a:	97 81       	ldd	r25, Z+7	; 0x07
 e1c:	02 c0       	rjmp	.+4      	; 0xe22 <vfprintf+0x3ba>
 e1e:	8f ef       	ldi	r24, 0xFF	; 255
 e20:	9f ef       	ldi	r25, 0xFF	; 255
 e22:	2b 96       	adiw	r28, 0x0b	; 11
 e24:	e2 e1       	ldi	r30, 0x12	; 18
 e26:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__epilogue_restores__>

00000e2a <strnlen_P>:
 e2a:	fc 01       	movw	r30, r24
 e2c:	05 90       	lpm	r0, Z+
 e2e:	61 50       	subi	r22, 0x01	; 1
 e30:	70 40       	sbci	r23, 0x00	; 0
 e32:	01 10       	cpse	r0, r1
 e34:	d8 f7       	brcc	.-10     	; 0xe2c <strnlen_P+0x2>
 e36:	80 95       	com	r24
 e38:	90 95       	com	r25
 e3a:	8e 0f       	add	r24, r30
 e3c:	9f 1f       	adc	r25, r31
 e3e:	08 95       	ret

00000e40 <strnlen>:
 e40:	fc 01       	movw	r30, r24
 e42:	61 50       	subi	r22, 0x01	; 1
 e44:	70 40       	sbci	r23, 0x00	; 0
 e46:	01 90       	ld	r0, Z+
 e48:	01 10       	cpse	r0, r1
 e4a:	d8 f7       	brcc	.-10     	; 0xe42 <strnlen+0x2>
 e4c:	80 95       	com	r24
 e4e:	90 95       	com	r25
 e50:	8e 0f       	add	r24, r30
 e52:	9f 1f       	adc	r25, r31
 e54:	08 95       	ret

00000e56 <fputc>:
 e56:	0f 93       	push	r16
 e58:	1f 93       	push	r17
 e5a:	cf 93       	push	r28
 e5c:	df 93       	push	r29
 e5e:	fb 01       	movw	r30, r22
 e60:	23 81       	ldd	r18, Z+3	; 0x03
 e62:	21 fd       	sbrc	r18, 1
 e64:	03 c0       	rjmp	.+6      	; 0xe6c <fputc+0x16>
 e66:	8f ef       	ldi	r24, 0xFF	; 255
 e68:	9f ef       	ldi	r25, 0xFF	; 255
 e6a:	2c c0       	rjmp	.+88     	; 0xec4 <fputc+0x6e>
 e6c:	22 ff       	sbrs	r18, 2
 e6e:	16 c0       	rjmp	.+44     	; 0xe9c <fputc+0x46>
 e70:	46 81       	ldd	r20, Z+6	; 0x06
 e72:	57 81       	ldd	r21, Z+7	; 0x07
 e74:	24 81       	ldd	r18, Z+4	; 0x04
 e76:	35 81       	ldd	r19, Z+5	; 0x05
 e78:	42 17       	cp	r20, r18
 e7a:	53 07       	cpc	r21, r19
 e7c:	44 f4       	brge	.+16     	; 0xe8e <fputc+0x38>
 e7e:	a0 81       	ld	r26, Z
 e80:	b1 81       	ldd	r27, Z+1	; 0x01
 e82:	9d 01       	movw	r18, r26
 e84:	2f 5f       	subi	r18, 0xFF	; 255
 e86:	3f 4f       	sbci	r19, 0xFF	; 255
 e88:	31 83       	std	Z+1, r19	; 0x01
 e8a:	20 83       	st	Z, r18
 e8c:	8c 93       	st	X, r24
 e8e:	26 81       	ldd	r18, Z+6	; 0x06
 e90:	37 81       	ldd	r19, Z+7	; 0x07
 e92:	2f 5f       	subi	r18, 0xFF	; 255
 e94:	3f 4f       	sbci	r19, 0xFF	; 255
 e96:	37 83       	std	Z+7, r19	; 0x07
 e98:	26 83       	std	Z+6, r18	; 0x06
 e9a:	14 c0       	rjmp	.+40     	; 0xec4 <fputc+0x6e>
 e9c:	8b 01       	movw	r16, r22
 e9e:	ec 01       	movw	r28, r24
 ea0:	fb 01       	movw	r30, r22
 ea2:	00 84       	ldd	r0, Z+8	; 0x08
 ea4:	f1 85       	ldd	r31, Z+9	; 0x09
 ea6:	e0 2d       	mov	r30, r0
 ea8:	09 95       	icall
 eaa:	89 2b       	or	r24, r25
 eac:	e1 f6       	brne	.-72     	; 0xe66 <fputc+0x10>
 eae:	d8 01       	movw	r26, r16
 eb0:	16 96       	adiw	r26, 0x06	; 6
 eb2:	8d 91       	ld	r24, X+
 eb4:	9c 91       	ld	r25, X
 eb6:	17 97       	sbiw	r26, 0x07	; 7
 eb8:	01 96       	adiw	r24, 0x01	; 1
 eba:	17 96       	adiw	r26, 0x07	; 7
 ebc:	9c 93       	st	X, r25
 ebe:	8e 93       	st	-X, r24
 ec0:	16 97       	sbiw	r26, 0x06	; 6
 ec2:	ce 01       	movw	r24, r28
 ec4:	df 91       	pop	r29
 ec6:	cf 91       	pop	r28
 ec8:	1f 91       	pop	r17
 eca:	0f 91       	pop	r16
 ecc:	08 95       	ret

00000ece <__ultoa_invert>:
 ece:	fa 01       	movw	r30, r20
 ed0:	aa 27       	eor	r26, r26
 ed2:	28 30       	cpi	r18, 0x08	; 8
 ed4:	51 f1       	breq	.+84     	; 0xf2a <__ultoa_invert+0x5c>
 ed6:	20 31       	cpi	r18, 0x10	; 16
 ed8:	81 f1       	breq	.+96     	; 0xf3a <__ultoa_invert+0x6c>
 eda:	e8 94       	clt
 edc:	6f 93       	push	r22
 ede:	6e 7f       	andi	r22, 0xFE	; 254
 ee0:	6e 5f       	subi	r22, 0xFE	; 254
 ee2:	7f 4f       	sbci	r23, 0xFF	; 255
 ee4:	8f 4f       	sbci	r24, 0xFF	; 255
 ee6:	9f 4f       	sbci	r25, 0xFF	; 255
 ee8:	af 4f       	sbci	r26, 0xFF	; 255
 eea:	b1 e0       	ldi	r27, 0x01	; 1
 eec:	3e d0       	rcall	.+124    	; 0xf6a <__ultoa_invert+0x9c>
 eee:	b4 e0       	ldi	r27, 0x04	; 4
 ef0:	3c d0       	rcall	.+120    	; 0xf6a <__ultoa_invert+0x9c>
 ef2:	67 0f       	add	r22, r23
 ef4:	78 1f       	adc	r23, r24
 ef6:	89 1f       	adc	r24, r25
 ef8:	9a 1f       	adc	r25, r26
 efa:	a1 1d       	adc	r26, r1
 efc:	68 0f       	add	r22, r24
 efe:	79 1f       	adc	r23, r25
 f00:	8a 1f       	adc	r24, r26
 f02:	91 1d       	adc	r25, r1
 f04:	a1 1d       	adc	r26, r1
 f06:	6a 0f       	add	r22, r26
 f08:	71 1d       	adc	r23, r1
 f0a:	81 1d       	adc	r24, r1
 f0c:	91 1d       	adc	r25, r1
 f0e:	a1 1d       	adc	r26, r1
 f10:	20 d0       	rcall	.+64     	; 0xf52 <__ultoa_invert+0x84>
 f12:	09 f4       	brne	.+2      	; 0xf16 <__ultoa_invert+0x48>
 f14:	68 94       	set
 f16:	3f 91       	pop	r19
 f18:	2a e0       	ldi	r18, 0x0A	; 10
 f1a:	26 9f       	mul	r18, r22
 f1c:	11 24       	eor	r1, r1
 f1e:	30 19       	sub	r19, r0
 f20:	30 5d       	subi	r19, 0xD0	; 208
 f22:	31 93       	st	Z+, r19
 f24:	de f6       	brtc	.-74     	; 0xedc <__ultoa_invert+0xe>
 f26:	cf 01       	movw	r24, r30
 f28:	08 95       	ret
 f2a:	46 2f       	mov	r20, r22
 f2c:	47 70       	andi	r20, 0x07	; 7
 f2e:	40 5d       	subi	r20, 0xD0	; 208
 f30:	41 93       	st	Z+, r20
 f32:	b3 e0       	ldi	r27, 0x03	; 3
 f34:	0f d0       	rcall	.+30     	; 0xf54 <__ultoa_invert+0x86>
 f36:	c9 f7       	brne	.-14     	; 0xf2a <__ultoa_invert+0x5c>
 f38:	f6 cf       	rjmp	.-20     	; 0xf26 <__ultoa_invert+0x58>
 f3a:	46 2f       	mov	r20, r22
 f3c:	4f 70       	andi	r20, 0x0F	; 15
 f3e:	40 5d       	subi	r20, 0xD0	; 208
 f40:	4a 33       	cpi	r20, 0x3A	; 58
 f42:	18 f0       	brcs	.+6      	; 0xf4a <__ultoa_invert+0x7c>
 f44:	49 5d       	subi	r20, 0xD9	; 217
 f46:	31 fd       	sbrc	r19, 1
 f48:	40 52       	subi	r20, 0x20	; 32
 f4a:	41 93       	st	Z+, r20
 f4c:	02 d0       	rcall	.+4      	; 0xf52 <__ultoa_invert+0x84>
 f4e:	a9 f7       	brne	.-22     	; 0xf3a <__ultoa_invert+0x6c>
 f50:	ea cf       	rjmp	.-44     	; 0xf26 <__ultoa_invert+0x58>
 f52:	b4 e0       	ldi	r27, 0x04	; 4
 f54:	a6 95       	lsr	r26
 f56:	97 95       	ror	r25
 f58:	87 95       	ror	r24
 f5a:	77 95       	ror	r23
 f5c:	67 95       	ror	r22
 f5e:	ba 95       	dec	r27
 f60:	c9 f7       	brne	.-14     	; 0xf54 <__ultoa_invert+0x86>
 f62:	00 97       	sbiw	r24, 0x00	; 0
 f64:	61 05       	cpc	r22, r1
 f66:	71 05       	cpc	r23, r1
 f68:	08 95       	ret
 f6a:	9b 01       	movw	r18, r22
 f6c:	ac 01       	movw	r20, r24
 f6e:	0a 2e       	mov	r0, r26
 f70:	06 94       	lsr	r0
 f72:	57 95       	ror	r21
 f74:	47 95       	ror	r20
 f76:	37 95       	ror	r19
 f78:	27 95       	ror	r18
 f7a:	ba 95       	dec	r27
 f7c:	c9 f7       	brne	.-14     	; 0xf70 <__ultoa_invert+0xa2>
 f7e:	62 0f       	add	r22, r18
 f80:	73 1f       	adc	r23, r19
 f82:	84 1f       	adc	r24, r20
 f84:	95 1f       	adc	r25, r21
 f86:	a0 1d       	adc	r26, r0
 f88:	08 95       	ret

00000f8a <__prologue_saves__>:
 f8a:	2f 92       	push	r2
 f8c:	3f 92       	push	r3
 f8e:	4f 92       	push	r4
 f90:	5f 92       	push	r5
 f92:	6f 92       	push	r6
 f94:	7f 92       	push	r7
 f96:	8f 92       	push	r8
 f98:	9f 92       	push	r9
 f9a:	af 92       	push	r10
 f9c:	bf 92       	push	r11
 f9e:	cf 92       	push	r12
 fa0:	df 92       	push	r13
 fa2:	ef 92       	push	r14
 fa4:	ff 92       	push	r15
 fa6:	0f 93       	push	r16
 fa8:	1f 93       	push	r17
 faa:	cf 93       	push	r28
 fac:	df 93       	push	r29
 fae:	cd b7       	in	r28, 0x3d	; 61
 fb0:	de b7       	in	r29, 0x3e	; 62
 fb2:	ca 1b       	sub	r28, r26
 fb4:	db 0b       	sbc	r29, r27
 fb6:	0f b6       	in	r0, 0x3f	; 63
 fb8:	f8 94       	cli
 fba:	de bf       	out	0x3e, r29	; 62
 fbc:	0f be       	out	0x3f, r0	; 63
 fbe:	cd bf       	out	0x3d, r28	; 61
 fc0:	09 94       	ijmp

00000fc2 <__epilogue_restores__>:
 fc2:	2a 88       	ldd	r2, Y+18	; 0x12
 fc4:	39 88       	ldd	r3, Y+17	; 0x11
 fc6:	48 88       	ldd	r4, Y+16	; 0x10
 fc8:	5f 84       	ldd	r5, Y+15	; 0x0f
 fca:	6e 84       	ldd	r6, Y+14	; 0x0e
 fcc:	7d 84       	ldd	r7, Y+13	; 0x0d
 fce:	8c 84       	ldd	r8, Y+12	; 0x0c
 fd0:	9b 84       	ldd	r9, Y+11	; 0x0b
 fd2:	aa 84       	ldd	r10, Y+10	; 0x0a
 fd4:	b9 84       	ldd	r11, Y+9	; 0x09
 fd6:	c8 84       	ldd	r12, Y+8	; 0x08
 fd8:	df 80       	ldd	r13, Y+7	; 0x07
 fda:	ee 80       	ldd	r14, Y+6	; 0x06
 fdc:	fd 80       	ldd	r15, Y+5	; 0x05
 fde:	0c 81       	ldd	r16, Y+4	; 0x04
 fe0:	1b 81       	ldd	r17, Y+3	; 0x03
 fe2:	aa 81       	ldd	r26, Y+2	; 0x02
 fe4:	b9 81       	ldd	r27, Y+1	; 0x01
 fe6:	ce 0f       	add	r28, r30
 fe8:	d1 1d       	adc	r29, r1
 fea:	0f b6       	in	r0, 0x3f	; 63
 fec:	f8 94       	cli
 fee:	de bf       	out	0x3e, r29	; 62
 ff0:	0f be       	out	0x3f, r0	; 63
 ff2:	cd bf       	out	0x3d, r28	; 61
 ff4:	ed 01       	movw	r28, r26
 ff6:	08 95       	ret

00000ff8 <_exit>:
 ff8:	f8 94       	cli

00000ffa <__stop_program>:
 ffa:	ff cf       	rjmp	.-2      	; 0xffa <__stop_program>
