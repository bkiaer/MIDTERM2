
MT2_Receive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800100  000008f4  00000988  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800120  00800120  000009a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000009d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ccb  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a54  00000000  00000000  000027f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000099b  00000000  00000000  00003247  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000344  00000000  00000000  00003be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000741  00000000  00000000  00003f28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f4e  00000000  00000000  00004669  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000055b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 18 01 	jmp	0x230	; 0x230 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 32       	cpi	r26, 0x20	; 32
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e2       	ldi	r26, 0x20	; 32
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 32       	cpi	r26, 0x25	; 37
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b9 00 	call	0x172	; 0x172 <main>
  9e:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup_rf>:
		ADCSRA |= (1<<ADSC);
		while(ADCSRA & (1<<ADSC));
		adc_temp+= ADC;
		_delay_ms(50);
	}
	adc_temp = adc_temp / 4; // Average a few samples
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	0e 94 33 01 	call	0x266	; 0x266 <nRF24L01_init>
  ae:	ec 01       	movw	r28, r24
  b0:	85 e2       	ldi	r24, 0x25	; 37
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	99 83       	std	Y+1, r25	; 0x01
  b6:	88 83       	st	Y, r24
  b8:	22 e0       	ldi	r18, 0x02	; 2
  ba:	2a 83       	std	Y+2, r18	; 0x02
  bc:	9c 83       	std	Y+4, r25	; 0x04
  be:	8b 83       	std	Y+3, r24	; 0x03
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	2d 83       	std	Y+5, r18	; 0x05
  c4:	9f 83       	std	Y+7, r25	; 0x07
  c6:	8e 83       	std	Y+6, r24	; 0x06
  c8:	25 e0       	ldi	r18, 0x05	; 5
  ca:	28 87       	std	Y+8, r18	; 0x08
  cc:	9a 87       	std	Y+10, r25	; 0x0a
  ce:	89 87       	std	Y+9, r24	; 0x09
  d0:	23 e0       	ldi	r18, 0x03	; 3
  d2:	2b 87       	std	Y+11, r18	; 0x0b
  d4:	9d 87       	std	Y+13, r25	; 0x0d
  d6:	8c 87       	std	Y+12, r24	; 0x0c
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	8e 87       	std	Y+14, r24	; 0x0e
  dc:	e9 e6       	ldi	r30, 0x69	; 105
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
  e6:	e8 9a       	sbi	0x1d, 0	; 29
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 23 02 	call	0x446	; 0x446 <nRF24L01_begin>
  ee:	ce 01       	movw	r24, r28
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <process_message>:
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
  fc:	6b e0       	ldi	r22, 0x0B	; 11
  fe:	71 e0       	ldi	r23, 0x01	; 1
 100:	0e 94 6f 04 	call	0x8de	; 0x8de <strcmp>
 104:	89 2b       	or	r24, r25
 106:	11 f4       	brne	.+4      	; 0x10c <process_message+0x16>
 108:	28 9a       	sbi	0x05, 0	; 5
 10a:	08 c0       	rjmp	.+16     	; 0x11c <process_message+0x26>
 10c:	6e e0       	ldi	r22, 0x0E	; 14
 10e:	71 e0       	ldi	r23, 0x01	; 1
 110:	ce 01       	movw	r24, r28
 112:	0e 94 6f 04 	call	0x8de	; 0x8de <strcmp>
 116:	89 2b       	or	r24, r25
 118:	09 f4       	brne	.+2      	; 0x11c <process_message+0x26>
 11a:	28 98       	cbi	0x05, 0	; 5
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <adc_init>:
 122:	82 e4       	ldi	r24, 0x42	; 66
 124:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 128:	85 e8       	ldi	r24, 0x85	; 133
 12a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 12e:	08 95       	ret

00000130 <USART_init>:

}

/* INIT USART (RS-232) */
void USART_init( unsigned int ubrr ) {
	UBRR0H = (unsigned char)(ubrr>>8);
 130:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 134:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1 << TXEN0); // Enable receiver, transmitter & RX interrupt
 138:	88 e0       	ldi	r24, 0x08	; 8
 13a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3 << UCSZ00); //asynchronous 8 N 1
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 144:	08 95       	ret

00000146 <USART_tx_string>:
}

void USART_tx_string( char *data ) {
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
	while ((*data != '\0')) {
 14a:	fc 01       	movw	r30, r24
 14c:	20 81       	ld	r18, Z
 14e:	22 23       	and	r18, r18
 150:	69 f0       	breq	.+26     	; 0x16c <USART_tx_string+0x26>
 152:	dc 01       	movw	r26, r24
 154:	11 96       	adiw	r26, 0x01	; 1
		while (!(UCSR0A & (1 <<UDRE0)));
 156:	e0 ec       	ldi	r30, 0xC0	; 192
 158:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *data;
 15a:	c6 ec       	ldi	r28, 0xC6	; 198
 15c:	d0 e0       	ldi	r29, 0x00	; 0
	UCSR0C = (3 << UCSZ00); //asynchronous 8 N 1
}

void USART_tx_string( char *data ) {
	while ((*data != '\0')) {
		while (!(UCSR0A & (1 <<UDRE0)));
 15e:	90 81       	ld	r25, Z
 160:	95 ff       	sbrs	r25, 5
 162:	fd cf       	rjmp	.-6      	; 0x15e <USART_tx_string+0x18>
		UDR0 = *data;
 164:	28 83       	st	Y, r18
	UCSR0B = (1 << TXEN0); // Enable receiver, transmitter & RX interrupt
	UCSR0C = (3 << UCSZ00); //asynchronous 8 N 1
}

void USART_tx_string( char *data ) {
	while ((*data != '\0')) {
 166:	2d 91       	ld	r18, X+
 168:	21 11       	cpse	r18, r1
 16a:	f9 cf       	rjmp	.-14     	; 0x15e <USART_tx_string+0x18>
		while (!(UCSR0A & (1 <<UDRE0)));
		UDR0 = *data;
		data++;
	}
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <main>:
void USART_tx_string(char *data); //Print String USART
volatile unsigned int adc_temp;
char outs[20]; //array


int main(void) {
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	ad 97       	sbiw	r28, 0x2d	; 45
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	de bf       	out	0x3e, r29	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	cd bf       	out	0x3d, r28	; 61
	uint8_t address[5] = { 0x20, 0x30, 0x40, 0x51, 0x61 };
 186:	85 e0       	ldi	r24, 0x05	; 5
 188:	e6 e0       	ldi	r30, 0x06	; 6
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	de 01       	movw	r26, r28
 18e:	11 96       	adiw	r26, 0x01	; 1
 190:	01 90       	ld	r0, Z+
 192:	0d 92       	st	X+, r0
 194:	8a 95       	dec	r24
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0x1e>
	set_led_high();
	else if (strcmp(message, "OFF") == 0)
	set_led_low();
}
inline void prepare_led_pin(void) {
	DDRB |= _BV(PB0);
 198:	20 9a       	sbi	0x04, 0	; 4
	PORTB &= ~_BV(PB0);
 19a:	28 98       	cbi	0x05, 0	; 5

int main(void) {
	uint8_t address[5] = { 0x20, 0x30, 0x40, 0x51, 0x61 };
	prepare_led_pin();
	
		adc_init(); // Initialize the ADC (Analog / Digital Converter)
 19c:	0e 94 91 00 	call	0x122	; 0x122 <adc_init>
		USART_init(MYUBRR); // Initialize the USART (RS232 interface)
 1a0:	87 e6       	ldi	r24, 0x67	; 103
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 98 00 	call	0x130	; 0x130 <USART_init>
		USART_tx_string("Connected!\r\n"); // shows theres a connection with USART
 1a8:	82 e1       	ldi	r24, 0x12	; 18
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 a3 00 	call	0x146	; 0x146 <USART_tx_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	2f e7       	ldi	r18, 0x7F	; 127
 1b2:	8a e1       	ldi	r24, 0x1A	; 26
 1b4:	96 e0       	ldi	r25, 0x06	; 6
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x44>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x4e>
 1c0:	00 00       	nop
		_delay_ms(125); // wait a bit
		
		
	sei();
 1c2:	78 94       	sei
	nRF24L01 *rf = setup_rf();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <setup_rf>
 1c8:	8c 01       	movw	r16, r24
	nRF24L01_listen(rf, 0, address);
 1ca:	ae 01       	movw	r20, r28
 1cc:	4f 5f       	subi	r20, 0xFF	; 255
 1ce:	5f 4f       	sbci	r21, 0xFF	; 255
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	0e 94 8a 01 	call	0x314	; 0x314 <nRF24L01_listen>
	uint8_t addr[5];
	nRF24L01_read_register(rf, CONFIG, addr, 1);
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	ae 01       	movw	r20, r28
 1de:	4a 5f       	subi	r20, 0xFA	; 250
 1e0:	5f 4f       	sbci	r21, 0xFF	; 255
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	c8 01       	movw	r24, r16
 1e6:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <nRF24L01_read_register>
	while (true) {
		if (rf_interrupt) {
 1ea:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_end>
 1ee:	88 23       	and	r24, r24
 1f0:	e1 f3       	breq	.-8      	; 0x1ea <main+0x78>
			rf_interrupt = false;
 1f2:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__data_end>
			while (nRF24L01_data_received(rf)) {
 1f6:	0e c0       	rjmp	.+28     	; 0x214 <main+0xa2>
				nRF24L01Message msg;
				nRF24L01_read_received_data(rf, &msg);
 1f8:	be 01       	movw	r22, r28
 1fa:	65 5f       	subi	r22, 0xF5	; 245
 1fc:	7f 4f       	sbci	r23, 0xFF	; 255
 1fe:	c8 01       	movw	r24, r16
 200:	0e 94 1e 03 	call	0x63c	; 0x63c <nRF24L01_read_received_data>
				process_message((char *)msg.data);
 204:	ce 01       	movw	r24, r28
 206:	0d 96       	adiw	r24, 0x0d	; 13
 208:	0e 94 7b 00 	call	0xf6	; 0xf6 <process_message>
				USART_tx_string(msg.data);
 20c:	ce 01       	movw	r24, r28
 20e:	0d 96       	adiw	r24, 0x0d	; 13
 210:	0e 94 a3 00 	call	0x146	; 0x146 <USART_tx_string>
	uint8_t addr[5];
	nRF24L01_read_register(rf, CONFIG, addr, 1);
	while (true) {
		if (rf_interrupt) {
			rf_interrupt = false;
			while (nRF24L01_data_received(rf)) {
 214:	c8 01       	movw	r24, r16
 216:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <nRF24L01_data_received>
 21a:	81 11       	cpse	r24, r1
 21c:	ed cf       	rjmp	.-38     	; 0x1f8 <main+0x86>
				nRF24L01Message msg;
				nRF24L01_read_received_data(rf, &msg);
				process_message((char *)msg.data);
				USART_tx_string(msg.data);
			}
			nRF24L01_listen(rf, 0, address);
 21e:	ae 01       	movw	r20, r28
 220:	4f 5f       	subi	r20, 0xFF	; 255
 222:	5f 4f       	sbci	r21, 0xFF	; 255
 224:	60 e0       	ldi	r22, 0x00	; 0
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	c8 01       	movw	r24, r16
 22a:	0e 94 8a 01 	call	0x314	; 0x314 <nRF24L01_listen>
 22e:	dd cf       	rjmp	.-70     	; 0x1ea <main+0x78>

00000230 <__vector_1>:
		UDR0 = *data;
		data++;
	}
}
// nRF24L01 interrupt
ISR(INT0_vect) {
 230:	1f 92       	push	r1
 232:	0f 92       	push	r0
 234:	0f b6       	in	r0, 0x3f	; 63
 236:	0f 92       	push	r0
 238:	11 24       	eor	r1, r1
 23a:	8f 93       	push	r24
	rf_interrupt = true;
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <__data_end>
}
 242:	8f 91       	pop	r24
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <copy_address>:
	uint8_t config;
	nRF24L01_read_register(rf, CONFIG, &config, 1);
	config |= _BV(PRIM_RX);
	nRF24L01_write_register(rf, CONFIG, &config, 1);
	return success;
}
 24e:	fc 01       	movw	r30, r24
 250:	a6 2f       	mov	r26, r22
 252:	b7 2f       	mov	r27, r23
 254:	9c 01       	movw	r18, r24
 256:	2b 5f       	subi	r18, 0xFB	; 251
 258:	3f 4f       	sbci	r19, 0xFF	; 255
 25a:	91 91       	ld	r25, Z+
 25c:	9d 93       	st	X+, r25
 25e:	e2 17       	cp	r30, r18
 260:	f3 07       	cpc	r31, r19
 262:	d9 f7       	brne	.-10     	; 0x25a <copy_address+0xc>
 264:	08 95       	ret

00000266 <nRF24L01_init>:
 266:	80 e1       	ldi	r24, 0x10	; 16
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 4e 03 	call	0x69c	; 0x69c <malloc>
 26e:	20 e1       	ldi	r18, 0x10	; 16
 270:	fc 01       	movw	r30, r24
 272:	11 92       	st	Z+, r1
 274:	2a 95       	dec	r18
 276:	e9 f7       	brne	.-6      	; 0x272 <nRF24L01_init+0xc>
 278:	08 95       	ret

0000027a <nRF24L01_send_command>:
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
 27e:	ec 01       	movw	r28, r24
 280:	da 01       	movw	r26, r20
 282:	e8 81       	ld	r30, Y
 284:	f9 81       	ldd	r31, Y+1	; 0x01
 286:	50 81       	ld	r21, Z
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0a 80       	ldd	r0, Y+2	; 0x02
 28e:	02 c0       	rjmp	.+4      	; 0x294 <nRF24L01_send_command+0x1a>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	0a 94       	dec	r0
 296:	e2 f7       	brpl	.-8      	; 0x290 <nRF24L01_send_command+0x16>
 298:	80 95       	com	r24
 29a:	85 23       	and	r24, r21
 29c:	80 83       	st	Z, r24
 29e:	6e bd       	out	0x2e, r22	; 46
 2a0:	0d b4       	in	r0, 0x2d	; 45
 2a2:	07 fe       	sbrs	r0, 7
 2a4:	fd cf       	rjmp	.-6      	; 0x2a0 <nRF24L01_send_command+0x26>
 2a6:	8e b5       	in	r24, 0x2e	; 46
 2a8:	8f 87       	std	Y+15, r24	; 0x0f
 2aa:	21 15       	cp	r18, r1
 2ac:	31 05       	cpc	r19, r1
 2ae:	79 f0       	breq	.+30     	; 0x2ce <nRF24L01_send_command+0x54>
 2b0:	fd 01       	movw	r30, r26
 2b2:	2a 0f       	add	r18, r26
 2b4:	3b 1f       	adc	r19, r27
 2b6:	df 01       	movw	r26, r30
 2b8:	90 81       	ld	r25, Z
 2ba:	9e bd       	out	0x2e, r25	; 46
 2bc:	0d b4       	in	r0, 0x2d	; 45
 2be:	07 fe       	sbrs	r0, 7
 2c0:	fd cf       	rjmp	.-6      	; 0x2bc <nRF24L01_send_command+0x42>
 2c2:	9e b5       	in	r25, 0x2e	; 46
 2c4:	9c 93       	st	X, r25
 2c6:	31 96       	adiw	r30, 0x01	; 1
 2c8:	e2 17       	cp	r30, r18
 2ca:	f3 07       	cpc	r31, r19
 2cc:	a1 f7       	brne	.-24     	; 0x2b6 <nRF24L01_send_command+0x3c>
 2ce:	e8 81       	ld	r30, Y
 2d0:	f9 81       	ldd	r31, Y+1	; 0x01
 2d2:	20 81       	ld	r18, Z
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0a 80       	ldd	r0, Y+2	; 0x02
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <nRF24L01_send_command+0x66>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	0a 94       	dec	r0
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <nRF24L01_send_command+0x62>
 2e4:	82 2b       	or	r24, r18
 2e6:	80 83       	st	Z, r24
 2e8:	8f 85       	ldd	r24, Y+15	; 0x0f
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <nRF24L01_write_register>:
 2f0:	60 62       	ori	r22, 0x20	; 32
 2f2:	0e 94 3d 01 	call	0x27a	; 0x27a <nRF24L01_send_command>
 2f6:	08 95       	ret

000002f8 <nRF24L01_read_register>:
 2f8:	0e 94 3d 01 	call	0x27a	; 0x27a <nRF24L01_send_command>
 2fc:	08 95       	ret

000002fe <nRF24L01_no_op>:
 2fe:	20 e0       	ldi	r18, 0x00	; 0
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	40 e0       	ldi	r20, 0x00	; 0
 304:	50 e0       	ldi	r21, 0x00	; 0
 306:	6f ef       	ldi	r22, 0xFF	; 255
 308:	0e 94 3d 01 	call	0x27a	; 0x27a <nRF24L01_send_command>
 30c:	08 95       	ret

0000030e <nRF24L01_update_status>:
 30e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <nRF24L01_no_op>
 312:	08 95       	ret

00000314 <nRF24L01_listen>:
 314:	df 92       	push	r13
 316:	ef 92       	push	r14
 318:	ff 92       	push	r15
 31a:	0f 93       	push	r16
 31c:	1f 93       	push	r17
 31e:	cf 93       	push	r28
 320:	df 93       	push	r29
 322:	00 d0       	rcall	.+0      	; 0x324 <nRF24L01_listen+0x10>
 324:	00 d0       	rcall	.+0      	; 0x326 <nRF24L01_listen+0x12>
 326:	00 d0       	rcall	.+0      	; 0x328 <nRF24L01_listen+0x14>
 328:	cd b7       	in	r28, 0x3d	; 61
 32a:	de b7       	in	r29, 0x3e	; 62
 32c:	7c 01       	movw	r14, r24
 32e:	d6 2e       	mov	r13, r22
 330:	ca 01       	movw	r24, r20
 332:	be 01       	movw	r22, r28
 334:	6f 5f       	subi	r22, 0xFF	; 255
 336:	7f 4f       	sbci	r23, 0xFF	; 255
 338:	0e 94 27 01 	call	0x24e	; 0x24e <copy_address>
 33c:	6a e0       	ldi	r22, 0x0A	; 10
 33e:	6d 0d       	add	r22, r13
 340:	25 e0       	ldi	r18, 0x05	; 5
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	ae 01       	movw	r20, r28
 346:	4f 5f       	subi	r20, 0xFF	; 255
 348:	5f 4f       	sbci	r21, 0xFF	; 255
 34a:	c7 01       	movw	r24, r14
 34c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <nRF24L01_write_register>
 350:	21 e0       	ldi	r18, 0x01	; 1
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	ae 01       	movw	r20, r28
 356:	4a 5f       	subi	r20, 0xFA	; 250
 358:	5f 4f       	sbci	r21, 0xFF	; 255
 35a:	62 e0       	ldi	r22, 0x02	; 2
 35c:	c7 01       	movw	r24, r14
 35e:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <nRF24L01_read_register>
 362:	01 e0       	ldi	r16, 0x01	; 1
 364:	10 e0       	ldi	r17, 0x00	; 0
 366:	c8 01       	movw	r24, r16
 368:	02 c0       	rjmp	.+4      	; 0x36e <nRF24L01_listen+0x5a>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	da 94       	dec	r13
 370:	e2 f7       	brpl	.-8      	; 0x36a <nRF24L01_listen+0x56>
 372:	9e 81       	ldd	r25, Y+6	; 0x06
 374:	89 2b       	or	r24, r25
 376:	8e 83       	std	Y+6, r24	; 0x06
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	ae 01       	movw	r20, r28
 37e:	4a 5f       	subi	r20, 0xFA	; 250
 380:	5f 4f       	sbci	r21, 0xFF	; 255
 382:	62 e0       	ldi	r22, 0x02	; 2
 384:	c7 01       	movw	r24, r14
 386:	0e 94 78 01 	call	0x2f0	; 0x2f0 <nRF24L01_write_register>
 38a:	d7 01       	movw	r26, r14
 38c:	13 96       	adiw	r26, 0x03	; 3
 38e:	ed 91       	ld	r30, X+
 390:	fc 91       	ld	r31, X
 392:	14 97       	sbiw	r26, 0x04	; 4
 394:	80 81       	ld	r24, Z
 396:	15 96       	adiw	r26, 0x05	; 5
 398:	0c 90       	ld	r0, X
 39a:	02 c0       	rjmp	.+4      	; 0x3a0 <nRF24L01_listen+0x8c>
 39c:	00 0f       	add	r16, r16
 39e:	11 1f       	adc	r17, r17
 3a0:	0a 94       	dec	r0
 3a2:	e2 f7       	brpl	.-8      	; 0x39c <nRF24L01_listen+0x88>
 3a4:	08 2b       	or	r16, r24
 3a6:	00 83       	st	Z, r16
 3a8:	26 96       	adiw	r28, 0x06	; 6
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
 3b4:	df 91       	pop	r29
 3b6:	cf 91       	pop	r28
 3b8:	1f 91       	pop	r17
 3ba:	0f 91       	pop	r16
 3bc:	ff 90       	pop	r15
 3be:	ef 90       	pop	r14
 3c0:	df 90       	pop	r13
 3c2:	08 95       	ret

000003c4 <nRF24L01_pipe_number_received>:
 3c4:	fc 01       	movw	r30, r24
 3c6:	27 85       	ldd	r18, Z+15	; 0x0f
 3c8:	2e 70       	andi	r18, 0x0E	; 14
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	35 95       	asr	r19
 3ce:	27 95       	ror	r18
 3d0:	26 30       	cpi	r18, 0x06	; 6
 3d2:	31 05       	cpc	r19, r1
 3d4:	1c f4       	brge	.+6      	; 0x3dc <nRF24L01_pipe_number_received+0x18>
 3d6:	82 2f       	mov	r24, r18
 3d8:	93 2f       	mov	r25, r19
 3da:	08 95       	ret
 3dc:	8f ef       	ldi	r24, 0xFF	; 255
 3de:	9f ef       	ldi	r25, 0xFF	; 255
 3e0:	08 95       	ret

000003e2 <nRF24L01_data_received>:
 3e2:	cf 93       	push	r28
 3e4:	df 93       	push	r29
 3e6:	ec 01       	movw	r28, r24
 3e8:	eb 81       	ldd	r30, Y+3	; 0x03
 3ea:	fc 81       	ldd	r31, Y+4	; 0x04
 3ec:	20 81       	ld	r18, Z
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	0d 80       	ldd	r0, Y+5	; 0x05
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <nRF24L01_data_received+0x18>
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	0a 94       	dec	r0
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <nRF24L01_data_received+0x14>
 3fe:	80 95       	com	r24
 400:	82 23       	and	r24, r18
 402:	80 83       	st	Z, r24
 404:	ce 01       	movw	r24, r28
 406:	0e 94 87 01 	call	0x30e	; 0x30e <nRF24L01_update_status>
 40a:	ce 01       	movw	r24, r28
 40c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <nRF24L01_pipe_number_received>
 410:	89 2f       	mov	r24, r25
 412:	80 95       	com	r24
 414:	88 1f       	adc	r24, r24
 416:	88 27       	eor	r24, r24
 418:	88 1f       	adc	r24, r24
 41a:	df 91       	pop	r29
 41c:	cf 91       	pop	r28
 41e:	08 95       	ret

00000420 <nRF24L01_clear_interrupts>:
 420:	cf 93       	push	r28
 422:	df 93       	push	r29
 424:	1f 92       	push	r1
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	20 e7       	ldi	r18, 0x70	; 112
 42c:	29 83       	std	Y+1, r18	; 0x01
 42e:	21 e0       	ldi	r18, 0x01	; 1
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	ae 01       	movw	r20, r28
 434:	4f 5f       	subi	r20, 0xFF	; 255
 436:	5f 4f       	sbci	r21, 0xFF	; 255
 438:	67 e0       	ldi	r22, 0x07	; 7
 43a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <nRF24L01_write_register>
 43e:	0f 90       	pop	r0
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	08 95       	ret

00000446 <nRF24L01_begin>:
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	1f 92       	push	r1
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62
 456:	8c 01       	movw	r16, r24
 458:	dc 01       	movw	r26, r24
 45a:	ed 91       	ld	r30, X+
 45c:	fc 91       	ld	r31, X
 45e:	11 97       	sbiw	r26, 0x01	; 1
 460:	42 91       	ld	r20, -Z
 462:	81 e0       	ldi	r24, 0x01	; 1
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	9c 01       	movw	r18, r24
 468:	12 96       	adiw	r26, 0x02	; 2
 46a:	0c 90       	ld	r0, X
 46c:	12 97       	sbiw	r26, 0x02	; 2
 46e:	02 c0       	rjmp	.+4      	; 0x474 <nRF24L01_begin+0x2e>
 470:	22 0f       	add	r18, r18
 472:	33 1f       	adc	r19, r19
 474:	0a 94       	dec	r0
 476:	e2 f7       	brpl	.-8      	; 0x470 <nRF24L01_begin+0x2a>
 478:	24 2b       	or	r18, r20
 47a:	20 83       	st	Z, r18
 47c:	13 96       	adiw	r26, 0x03	; 3
 47e:	ed 91       	ld	r30, X+
 480:	fc 91       	ld	r31, X
 482:	14 97       	sbiw	r26, 0x04	; 4
 484:	42 91       	ld	r20, -Z
 486:	9c 01       	movw	r18, r24
 488:	15 96       	adiw	r26, 0x05	; 5
 48a:	0c 90       	ld	r0, X
 48c:	15 97       	sbiw	r26, 0x05	; 5
 48e:	02 c0       	rjmp	.+4      	; 0x494 <nRF24L01_begin+0x4e>
 490:	22 0f       	add	r18, r18
 492:	33 1f       	adc	r19, r19
 494:	0a 94       	dec	r0
 496:	e2 f7       	brpl	.-8      	; 0x490 <nRF24L01_begin+0x4a>
 498:	24 2b       	or	r18, r20
 49a:	20 83       	st	Z, r18
 49c:	ed 91       	ld	r30, X+
 49e:	fc 91       	ld	r31, X
 4a0:	11 97       	sbiw	r26, 0x01	; 1
 4a2:	40 81       	ld	r20, Z
 4a4:	9c 01       	movw	r18, r24
 4a6:	12 96       	adiw	r26, 0x02	; 2
 4a8:	0c 90       	ld	r0, X
 4aa:	12 97       	sbiw	r26, 0x02	; 2
 4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <nRF24L01_begin+0x6c>
 4ae:	22 0f       	add	r18, r18
 4b0:	33 1f       	adc	r19, r19
 4b2:	0a 94       	dec	r0
 4b4:	e2 f7       	brpl	.-8      	; 0x4ae <nRF24L01_begin+0x68>
 4b6:	24 2b       	or	r18, r20
 4b8:	20 83       	st	Z, r18
 4ba:	13 96       	adiw	r26, 0x03	; 3
 4bc:	ed 91       	ld	r30, X+
 4be:	fc 91       	ld	r31, X
 4c0:	14 97       	sbiw	r26, 0x04	; 4
 4c2:	30 81       	ld	r19, Z
 4c4:	ac 01       	movw	r20, r24
 4c6:	15 96       	adiw	r26, 0x05	; 5
 4c8:	0c 90       	ld	r0, X
 4ca:	15 97       	sbiw	r26, 0x05	; 5
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <nRF24L01_begin+0x8c>
 4ce:	44 0f       	add	r20, r20
 4d0:	55 1f       	adc	r21, r21
 4d2:	0a 94       	dec	r0
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <nRF24L01_begin+0x88>
 4d6:	24 2f       	mov	r18, r20
 4d8:	20 95       	com	r18
 4da:	23 23       	and	r18, r19
 4dc:	20 83       	st	Z, r18
 4de:	2c b5       	in	r18, 0x2c	; 44
 4e0:	20 61       	ori	r18, 0x10	; 16
 4e2:	2c bd       	out	0x2c, r18	; 44
 4e4:	2c b5       	in	r18, 0x2c	; 44
 4e6:	20 64       	ori	r18, 0x40	; 64
 4e8:	2c bd       	out	0x2c, r18	; 44
 4ea:	16 96       	adiw	r26, 0x06	; 6
 4ec:	ed 91       	ld	r30, X+
 4ee:	fc 91       	ld	r31, X
 4f0:	17 97       	sbiw	r26, 0x07	; 7
 4f2:	42 91       	ld	r20, -Z
 4f4:	9c 01       	movw	r18, r24
 4f6:	18 96       	adiw	r26, 0x08	; 8
 4f8:	0c 90       	ld	r0, X
 4fa:	18 97       	sbiw	r26, 0x08	; 8
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <nRF24L01_begin+0xbc>
 4fe:	22 0f       	add	r18, r18
 500:	33 1f       	adc	r19, r19
 502:	0a 94       	dec	r0
 504:	e2 f7       	brpl	.-8      	; 0x4fe <nRF24L01_begin+0xb8>
 506:	24 2b       	or	r18, r20
 508:	20 83       	st	Z, r18
 50a:	19 96       	adiw	r26, 0x09	; 9
 50c:	ed 91       	ld	r30, X+
 50e:	fc 91       	ld	r31, X
 510:	1a 97       	sbiw	r26, 0x0a	; 10
 512:	42 91       	ld	r20, -Z
 514:	9c 01       	movw	r18, r24
 516:	1b 96       	adiw	r26, 0x0b	; 11
 518:	0c 90       	ld	r0, X
 51a:	1b 97       	sbiw	r26, 0x0b	; 11
 51c:	02 c0       	rjmp	.+4      	; 0x522 <nRF24L01_begin+0xdc>
 51e:	22 0f       	add	r18, r18
 520:	33 1f       	adc	r19, r19
 522:	0a 94       	dec	r0
 524:	e2 f7       	brpl	.-8      	; 0x51e <nRF24L01_begin+0xd8>
 526:	24 2b       	or	r18, r20
 528:	20 83       	st	Z, r18
 52a:	1c 96       	adiw	r26, 0x0c	; 12
 52c:	ed 91       	ld	r30, X+
 52e:	fc 91       	ld	r31, X
 530:	1d 97       	sbiw	r26, 0x0d	; 13
 532:	22 91       	ld	r18, -Z
 534:	1e 96       	adiw	r26, 0x0e	; 14
 536:	0c 90       	ld	r0, X
 538:	02 c0       	rjmp	.+4      	; 0x53e <nRF24L01_begin+0xf8>
 53a:	88 0f       	add	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	0a 94       	dec	r0
 540:	e2 f7       	brpl	.-8      	; 0x53a <nRF24L01_begin+0xf4>
 542:	80 95       	com	r24
 544:	82 23       	and	r24, r18
 546:	80 83       	st	Z, r24
 548:	8c b5       	in	r24, 0x2c	; 44
 54a:	87 7f       	andi	r24, 0xF7	; 247
 54c:	8c bd       	out	0x2c, r24	; 44
 54e:	8c b5       	in	r24, 0x2c	; 44
 550:	8b 7f       	andi	r24, 0xFB	; 251
 552:	8c bd       	out	0x2c, r24	; 44
 554:	8c b5       	in	r24, 0x2c	; 44
 556:	8e 7f       	andi	r24, 0xFE	; 254
 558:	8c bd       	out	0x2c, r24	; 44
 55a:	8c b5       	in	r24, 0x2c	; 44
 55c:	8d 7f       	andi	r24, 0xFD	; 253
 55e:	8c bd       	out	0x2c, r24	; 44
 560:	8d b5       	in	r24, 0x2d	; 45
 562:	81 60       	ori	r24, 0x01	; 1
 564:	8d bd       	out	0x2d, r24	; 45
 566:	8c b5       	in	r24, 0x2c	; 44
 568:	8f 7d       	andi	r24, 0xDF	; 223
 56a:	8c bd       	out	0x2c, r24	; 44
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	40 e0       	ldi	r20, 0x00	; 0
 572:	50 e0       	ldi	r21, 0x00	; 0
 574:	62 ee       	ldi	r22, 0xE2	; 226
 576:	c8 01       	movw	r24, r16
 578:	0e 94 3d 01 	call	0x27a	; 0x27a <nRF24L01_send_command>
 57c:	20 e0       	ldi	r18, 0x00	; 0
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	40 e0       	ldi	r20, 0x00	; 0
 582:	50 e0       	ldi	r21, 0x00	; 0
 584:	61 ee       	ldi	r22, 0xE1	; 225
 586:	c8 01       	movw	r24, r16
 588:	0e 94 3d 01 	call	0x27a	; 0x27a <nRF24L01_send_command>
 58c:	c8 01       	movw	r24, r16
 58e:	0e 94 10 02 	call	0x420	; 0x420 <nRF24L01_clear_interrupts>
 592:	8f e0       	ldi	r24, 0x0F	; 15
 594:	89 83       	std	Y+1, r24	; 0x01
 596:	21 e0       	ldi	r18, 0x01	; 1
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	ae 01       	movw	r20, r28
 59c:	4f 5f       	subi	r20, 0xFF	; 255
 59e:	5f 4f       	sbci	r21, 0xFF	; 255
 5a0:	60 e0       	ldi	r22, 0x00	; 0
 5a2:	c8 01       	movw	r24, r16
 5a4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <nRF24L01_write_register>
 5a8:	0f 2e       	mov	r0, r31
 5aa:	ff e3       	ldi	r31, 0x3F	; 63
 5ac:	ff 2e       	mov	r15, r31
 5ae:	f0 2d       	mov	r31, r0
 5b0:	f9 82       	std	Y+1, r15	; 0x01
 5b2:	21 e0       	ldi	r18, 0x01	; 1
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	ae 01       	movw	r20, r28
 5b8:	4f 5f       	subi	r20, 0xFF	; 255
 5ba:	5f 4f       	sbci	r21, 0xFF	; 255
 5bc:	61 e0       	ldi	r22, 0x01	; 1
 5be:	c8 01       	movw	r24, r16
 5c0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <nRF24L01_write_register>
 5c4:	f9 82       	std	Y+1, r15	; 0x01
 5c6:	21 e0       	ldi	r18, 0x01	; 1
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	ae 01       	movw	r20, r28
 5cc:	4f 5f       	subi	r20, 0xFF	; 255
 5ce:	5f 4f       	sbci	r21, 0xFF	; 255
 5d0:	6c e1       	ldi	r22, 0x1C	; 28
 5d2:	c8 01       	movw	r24, r16
 5d4:	0e 94 78 01 	call	0x2f0	; 0x2f0 <nRF24L01_write_register>
 5d8:	84 e0       	ldi	r24, 0x04	; 4
 5da:	89 83       	std	Y+1, r24	; 0x01
 5dc:	21 e0       	ldi	r18, 0x01	; 1
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	ae 01       	movw	r20, r28
 5e2:	4f 5f       	subi	r20, 0xFF	; 255
 5e4:	5f 4f       	sbci	r21, 0xFF	; 255
 5e6:	6d e1       	ldi	r22, 0x1D	; 29
 5e8:	c8 01       	movw	r24, r16
 5ea:	0e 94 78 01 	call	0x2f0	; 0x2f0 <nRF24L01_write_register>
 5ee:	19 82       	std	Y+1, r1	; 0x01
 5f0:	21 e0       	ldi	r18, 0x01	; 1
 5f2:	30 e0       	ldi	r19, 0x00	; 0
 5f4:	ae 01       	movw	r20, r28
 5f6:	4f 5f       	subi	r20, 0xFF	; 255
 5f8:	5f 4f       	sbci	r21, 0xFF	; 255
 5fa:	62 e0       	ldi	r22, 0x02	; 2
 5fc:	c8 01       	movw	r24, r16
 5fe:	0e 94 78 01 	call	0x2f0	; 0x2f0 <nRF24L01_write_register>
 602:	0f 90       	pop	r0
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	1f 91       	pop	r17
 60a:	0f 91       	pop	r16
 60c:	ff 90       	pop	r15
 60e:	08 95       	ret

00000610 <nRF24L01_clear_receive_interrupt>:
void nRF24L01_clear_transmit_interrupts(nRF24L01 *rf) {
	uint8_t data = _BV(TX_DS) | _BV(MAX_RT);
	nRF24L01_write_register(rf, STATUS, &data, 1);
}

void nRF24L01_clear_receive_interrupt(nRF24L01 *rf) {
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
 614:	1f 92       	push	r1
 616:	cd b7       	in	r28, 0x3d	; 61
 618:	de b7       	in	r29, 0x3e	; 62
 61a:	fc 01       	movw	r30, r24
	uint8_t data = _BV(RX_DR) | rf->status;
 61c:	97 85       	ldd	r25, Z+15	; 0x0f
 61e:	90 64       	ori	r25, 0x40	; 64
 620:	99 83       	std	Y+1, r25	; 0x01
	nRF24L01_write_register(rf, STATUS, &data, 1);
 622:	21 e0       	ldi	r18, 0x01	; 1
 624:	30 e0       	ldi	r19, 0x00	; 0
 626:	ae 01       	movw	r20, r28
 628:	4f 5f       	subi	r20, 0xFF	; 255
 62a:	5f 4f       	sbci	r21, 0xFF	; 255
 62c:	67 e0       	ldi	r22, 0x07	; 7
 62e:	cf 01       	movw	r24, r30
 630:	0e 94 78 01 	call	0x2f0	; 0x2f0 <nRF24L01_write_register>
}
 634:	0f 90       	pop	r0
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	08 95       	ret

0000063c <nRF24L01_read_received_data>:
	nRF24L01_write_register(rf, EN_RXADDR, &current_pipes, 1);

	set_high(rf->ce);
}

bool nRF24L01_read_received_data(nRF24L01 *rf, nRF24L01Message *message) {
 63c:	0f 93       	push	r16
 63e:	1f 93       	push	r17
 640:	cf 93       	push	r28
 642:	df 93       	push	r29
 644:	8c 01       	movw	r16, r24
 646:	eb 01       	movw	r28, r22
	message->pipe_number = nRF24L01_pipe_number_received(rf);
 648:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <nRF24L01_pipe_number_received>
 64c:	99 83       	std	Y+1, r25	; 0x01
 64e:	88 83       	st	Y, r24
	nRF24L01_clear_receive_interrupt(rf);
 650:	c8 01       	movw	r24, r16
 652:	0e 94 08 03 	call	0x610	; 0x610 <nRF24L01_clear_receive_interrupt>
	if (message->pipe_number < 0) {
 656:	88 81       	ld	r24, Y
 658:	99 81       	ldd	r25, Y+1	; 0x01
 65a:	99 23       	and	r25, r25
 65c:	1c f4       	brge	.+6      	; 0x664 <nRF24L01_read_received_data+0x28>
		message->length = 0;
 65e:	1a a2       	std	Y+34, r1	; 0x22
		return false;
 660:	80 e0       	ldi	r24, 0x00	; 0
 662:	17 c0       	rjmp	.+46     	; 0x692 <nRF24L01_read_received_data+0x56>
	}

	nRF24L01_read_register(rf, R_RX_PL_WID, &message->length, 1);
 664:	21 e0       	ldi	r18, 0x01	; 1
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	ae 01       	movw	r20, r28
 66a:	4e 5d       	subi	r20, 0xDE	; 222
 66c:	5f 4f       	sbci	r21, 0xFF	; 255
 66e:	60 e6       	ldi	r22, 0x60	; 96
 670:	c8 01       	movw	r24, r16
 672:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <nRF24L01_read_register>

	if (message->length > 0) {
 676:	2a a1       	ldd	r18, Y+34	; 0x22
 678:	22 23       	and	r18, r18
 67a:	51 f0       	breq	.+20     	; 0x690 <nRF24L01_read_received_data+0x54>
		nRF24L01_send_command(rf, R_RX_PAYLOAD, &message->data,
 67c:	30 e0       	ldi	r19, 0x00	; 0
 67e:	ae 01       	movw	r20, r28
 680:	4e 5f       	subi	r20, 0xFE	; 254
 682:	5f 4f       	sbci	r21, 0xFF	; 255
 684:	61 e6       	ldi	r22, 0x61	; 97
 686:	c8 01       	movw	r24, r16
 688:	0e 94 3d 01 	call	0x27a	; 0x27a <nRF24L01_send_command>
		message->length);
	}

	return true;
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	01 c0       	rjmp	.+2      	; 0x692 <nRF24L01_read_received_data+0x56>
 690:	81 e0       	ldi	r24, 0x01	; 1
}
 692:	df 91       	pop	r29
 694:	cf 91       	pop	r28
 696:	1f 91       	pop	r17
 698:	0f 91       	pop	r16
 69a:	08 95       	ret

0000069c <malloc>:
 69c:	0f 93       	push	r16
 69e:	1f 93       	push	r17
 6a0:	cf 93       	push	r28
 6a2:	df 93       	push	r29
 6a4:	82 30       	cpi	r24, 0x02	; 2
 6a6:	91 05       	cpc	r25, r1
 6a8:	10 f4       	brcc	.+4      	; 0x6ae <malloc+0x12>
 6aa:	82 e0       	ldi	r24, 0x02	; 2
 6ac:	90 e0       	ldi	r25, 0x00	; 0
 6ae:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <__flp>
 6b2:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <__flp+0x1>
 6b6:	20 e0       	ldi	r18, 0x00	; 0
 6b8:	30 e0       	ldi	r19, 0x00	; 0
 6ba:	a0 e0       	ldi	r26, 0x00	; 0
 6bc:	b0 e0       	ldi	r27, 0x00	; 0
 6be:	30 97       	sbiw	r30, 0x00	; 0
 6c0:	19 f1       	breq	.+70     	; 0x708 <malloc+0x6c>
 6c2:	40 81       	ld	r20, Z
 6c4:	51 81       	ldd	r21, Z+1	; 0x01
 6c6:	02 81       	ldd	r16, Z+2	; 0x02
 6c8:	13 81       	ldd	r17, Z+3	; 0x03
 6ca:	48 17       	cp	r20, r24
 6cc:	59 07       	cpc	r21, r25
 6ce:	c8 f0       	brcs	.+50     	; 0x702 <malloc+0x66>
 6d0:	84 17       	cp	r24, r20
 6d2:	95 07       	cpc	r25, r21
 6d4:	69 f4       	brne	.+26     	; 0x6f0 <malloc+0x54>
 6d6:	10 97       	sbiw	r26, 0x00	; 0
 6d8:	31 f0       	breq	.+12     	; 0x6e6 <malloc+0x4a>
 6da:	12 96       	adiw	r26, 0x02	; 2
 6dc:	0c 93       	st	X, r16
 6de:	12 97       	sbiw	r26, 0x02	; 2
 6e0:	13 96       	adiw	r26, 0x03	; 3
 6e2:	1c 93       	st	X, r17
 6e4:	27 c0       	rjmp	.+78     	; 0x734 <malloc+0x98>
 6e6:	00 93 23 01 	sts	0x0123, r16	; 0x800123 <__flp>
 6ea:	10 93 24 01 	sts	0x0124, r17	; 0x800124 <__flp+0x1>
 6ee:	22 c0       	rjmp	.+68     	; 0x734 <malloc+0x98>
 6f0:	21 15       	cp	r18, r1
 6f2:	31 05       	cpc	r19, r1
 6f4:	19 f0       	breq	.+6      	; 0x6fc <malloc+0x60>
 6f6:	42 17       	cp	r20, r18
 6f8:	53 07       	cpc	r21, r19
 6fa:	18 f4       	brcc	.+6      	; 0x702 <malloc+0x66>
 6fc:	9a 01       	movw	r18, r20
 6fe:	bd 01       	movw	r22, r26
 700:	ef 01       	movw	r28, r30
 702:	df 01       	movw	r26, r30
 704:	f8 01       	movw	r30, r16
 706:	db cf       	rjmp	.-74     	; 0x6be <malloc+0x22>
 708:	21 15       	cp	r18, r1
 70a:	31 05       	cpc	r19, r1
 70c:	f9 f0       	breq	.+62     	; 0x74c <malloc+0xb0>
 70e:	28 1b       	sub	r18, r24
 710:	39 0b       	sbc	r19, r25
 712:	24 30       	cpi	r18, 0x04	; 4
 714:	31 05       	cpc	r19, r1
 716:	80 f4       	brcc	.+32     	; 0x738 <malloc+0x9c>
 718:	8a 81       	ldd	r24, Y+2	; 0x02
 71a:	9b 81       	ldd	r25, Y+3	; 0x03
 71c:	61 15       	cp	r22, r1
 71e:	71 05       	cpc	r23, r1
 720:	21 f0       	breq	.+8      	; 0x72a <malloc+0x8e>
 722:	fb 01       	movw	r30, r22
 724:	93 83       	std	Z+3, r25	; 0x03
 726:	82 83       	std	Z+2, r24	; 0x02
 728:	04 c0       	rjmp	.+8      	; 0x732 <malloc+0x96>
 72a:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <__flp+0x1>
 72e:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <__flp>
 732:	fe 01       	movw	r30, r28
 734:	32 96       	adiw	r30, 0x02	; 2
 736:	44 c0       	rjmp	.+136    	; 0x7c0 <malloc+0x124>
 738:	fe 01       	movw	r30, r28
 73a:	e2 0f       	add	r30, r18
 73c:	f3 1f       	adc	r31, r19
 73e:	81 93       	st	Z+, r24
 740:	91 93       	st	Z+, r25
 742:	22 50       	subi	r18, 0x02	; 2
 744:	31 09       	sbc	r19, r1
 746:	39 83       	std	Y+1, r19	; 0x01
 748:	28 83       	st	Y, r18
 74a:	3a c0       	rjmp	.+116    	; 0x7c0 <malloc+0x124>
 74c:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <__brkval>
 750:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <__brkval+0x1>
 754:	23 2b       	or	r18, r19
 756:	41 f4       	brne	.+16     	; 0x768 <malloc+0xcc>
 758:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 75c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 760:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <__brkval+0x1>
 764:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <__brkval>
 768:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 76c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 770:	21 15       	cp	r18, r1
 772:	31 05       	cpc	r19, r1
 774:	41 f4       	brne	.+16     	; 0x786 <malloc+0xea>
 776:	2d b7       	in	r18, 0x3d	; 61
 778:	3e b7       	in	r19, 0x3e	; 62
 77a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 77e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 782:	24 1b       	sub	r18, r20
 784:	35 0b       	sbc	r19, r21
 786:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <__brkval>
 78a:	f0 91 22 01 	lds	r31, 0x0122	; 0x800122 <__brkval+0x1>
 78e:	e2 17       	cp	r30, r18
 790:	f3 07       	cpc	r31, r19
 792:	a0 f4       	brcc	.+40     	; 0x7bc <malloc+0x120>
 794:	2e 1b       	sub	r18, r30
 796:	3f 0b       	sbc	r19, r31
 798:	28 17       	cp	r18, r24
 79a:	39 07       	cpc	r19, r25
 79c:	78 f0       	brcs	.+30     	; 0x7bc <malloc+0x120>
 79e:	ac 01       	movw	r20, r24
 7a0:	4e 5f       	subi	r20, 0xFE	; 254
 7a2:	5f 4f       	sbci	r21, 0xFF	; 255
 7a4:	24 17       	cp	r18, r20
 7a6:	35 07       	cpc	r19, r21
 7a8:	48 f0       	brcs	.+18     	; 0x7bc <malloc+0x120>
 7aa:	4e 0f       	add	r20, r30
 7ac:	5f 1f       	adc	r21, r31
 7ae:	50 93 22 01 	sts	0x0122, r21	; 0x800122 <__brkval+0x1>
 7b2:	40 93 21 01 	sts	0x0121, r20	; 0x800121 <__brkval>
 7b6:	81 93       	st	Z+, r24
 7b8:	91 93       	st	Z+, r25
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <malloc+0x124>
 7bc:	e0 e0       	ldi	r30, 0x00	; 0
 7be:	f0 e0       	ldi	r31, 0x00	; 0
 7c0:	cf 01       	movw	r24, r30
 7c2:	df 91       	pop	r29
 7c4:	cf 91       	pop	r28
 7c6:	1f 91       	pop	r17
 7c8:	0f 91       	pop	r16
 7ca:	08 95       	ret

000007cc <free>:
 7cc:	cf 93       	push	r28
 7ce:	df 93       	push	r29
 7d0:	00 97       	sbiw	r24, 0x00	; 0
 7d2:	09 f4       	brne	.+2      	; 0x7d6 <free+0xa>
 7d4:	81 c0       	rjmp	.+258    	; 0x8d8 <free+0x10c>
 7d6:	fc 01       	movw	r30, r24
 7d8:	32 97       	sbiw	r30, 0x02	; 2
 7da:	13 82       	std	Z+3, r1	; 0x03
 7dc:	12 82       	std	Z+2, r1	; 0x02
 7de:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <__flp>
 7e2:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <__flp+0x1>
 7e6:	10 97       	sbiw	r26, 0x00	; 0
 7e8:	81 f4       	brne	.+32     	; 0x80a <free+0x3e>
 7ea:	20 81       	ld	r18, Z
 7ec:	31 81       	ldd	r19, Z+1	; 0x01
 7ee:	82 0f       	add	r24, r18
 7f0:	93 1f       	adc	r25, r19
 7f2:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <__brkval>
 7f6:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <__brkval+0x1>
 7fa:	28 17       	cp	r18, r24
 7fc:	39 07       	cpc	r19, r25
 7fe:	51 f5       	brne	.+84     	; 0x854 <free+0x88>
 800:	f0 93 22 01 	sts	0x0122, r31	; 0x800122 <__brkval+0x1>
 804:	e0 93 21 01 	sts	0x0121, r30	; 0x800121 <__brkval>
 808:	67 c0       	rjmp	.+206    	; 0x8d8 <free+0x10c>
 80a:	ed 01       	movw	r28, r26
 80c:	20 e0       	ldi	r18, 0x00	; 0
 80e:	30 e0       	ldi	r19, 0x00	; 0
 810:	ce 17       	cp	r28, r30
 812:	df 07       	cpc	r29, r31
 814:	40 f4       	brcc	.+16     	; 0x826 <free+0x5a>
 816:	4a 81       	ldd	r20, Y+2	; 0x02
 818:	5b 81       	ldd	r21, Y+3	; 0x03
 81a:	9e 01       	movw	r18, r28
 81c:	41 15       	cp	r20, r1
 81e:	51 05       	cpc	r21, r1
 820:	f1 f0       	breq	.+60     	; 0x85e <free+0x92>
 822:	ea 01       	movw	r28, r20
 824:	f5 cf       	rjmp	.-22     	; 0x810 <free+0x44>
 826:	d3 83       	std	Z+3, r29	; 0x03
 828:	c2 83       	std	Z+2, r28	; 0x02
 82a:	40 81       	ld	r20, Z
 82c:	51 81       	ldd	r21, Z+1	; 0x01
 82e:	84 0f       	add	r24, r20
 830:	95 1f       	adc	r25, r21
 832:	c8 17       	cp	r28, r24
 834:	d9 07       	cpc	r29, r25
 836:	59 f4       	brne	.+22     	; 0x84e <free+0x82>
 838:	88 81       	ld	r24, Y
 83a:	99 81       	ldd	r25, Y+1	; 0x01
 83c:	84 0f       	add	r24, r20
 83e:	95 1f       	adc	r25, r21
 840:	02 96       	adiw	r24, 0x02	; 2
 842:	91 83       	std	Z+1, r25	; 0x01
 844:	80 83       	st	Z, r24
 846:	8a 81       	ldd	r24, Y+2	; 0x02
 848:	9b 81       	ldd	r25, Y+3	; 0x03
 84a:	93 83       	std	Z+3, r25	; 0x03
 84c:	82 83       	std	Z+2, r24	; 0x02
 84e:	21 15       	cp	r18, r1
 850:	31 05       	cpc	r19, r1
 852:	29 f4       	brne	.+10     	; 0x85e <free+0x92>
 854:	f0 93 24 01 	sts	0x0124, r31	; 0x800124 <__flp+0x1>
 858:	e0 93 23 01 	sts	0x0123, r30	; 0x800123 <__flp>
 85c:	3d c0       	rjmp	.+122    	; 0x8d8 <free+0x10c>
 85e:	e9 01       	movw	r28, r18
 860:	fb 83       	std	Y+3, r31	; 0x03
 862:	ea 83       	std	Y+2, r30	; 0x02
 864:	49 91       	ld	r20, Y+
 866:	59 91       	ld	r21, Y+
 868:	c4 0f       	add	r28, r20
 86a:	d5 1f       	adc	r29, r21
 86c:	ec 17       	cp	r30, r28
 86e:	fd 07       	cpc	r31, r29
 870:	61 f4       	brne	.+24     	; 0x88a <free+0xbe>
 872:	80 81       	ld	r24, Z
 874:	91 81       	ldd	r25, Z+1	; 0x01
 876:	84 0f       	add	r24, r20
 878:	95 1f       	adc	r25, r21
 87a:	02 96       	adiw	r24, 0x02	; 2
 87c:	e9 01       	movw	r28, r18
 87e:	99 83       	std	Y+1, r25	; 0x01
 880:	88 83       	st	Y, r24
 882:	82 81       	ldd	r24, Z+2	; 0x02
 884:	93 81       	ldd	r25, Z+3	; 0x03
 886:	9b 83       	std	Y+3, r25	; 0x03
 888:	8a 83       	std	Y+2, r24	; 0x02
 88a:	e0 e0       	ldi	r30, 0x00	; 0
 88c:	f0 e0       	ldi	r31, 0x00	; 0
 88e:	12 96       	adiw	r26, 0x02	; 2
 890:	8d 91       	ld	r24, X+
 892:	9c 91       	ld	r25, X
 894:	13 97       	sbiw	r26, 0x03	; 3
 896:	00 97       	sbiw	r24, 0x00	; 0
 898:	19 f0       	breq	.+6      	; 0x8a0 <free+0xd4>
 89a:	fd 01       	movw	r30, r26
 89c:	dc 01       	movw	r26, r24
 89e:	f7 cf       	rjmp	.-18     	; 0x88e <free+0xc2>
 8a0:	8d 91       	ld	r24, X+
 8a2:	9c 91       	ld	r25, X
 8a4:	11 97       	sbiw	r26, 0x01	; 1
 8a6:	9d 01       	movw	r18, r26
 8a8:	2e 5f       	subi	r18, 0xFE	; 254
 8aa:	3f 4f       	sbci	r19, 0xFF	; 255
 8ac:	82 0f       	add	r24, r18
 8ae:	93 1f       	adc	r25, r19
 8b0:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <__brkval>
 8b4:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <__brkval+0x1>
 8b8:	28 17       	cp	r18, r24
 8ba:	39 07       	cpc	r19, r25
 8bc:	69 f4       	brne	.+26     	; 0x8d8 <free+0x10c>
 8be:	30 97       	sbiw	r30, 0x00	; 0
 8c0:	29 f4       	brne	.+10     	; 0x8cc <free+0x100>
 8c2:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__flp+0x1>
 8c6:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <__flp>
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <free+0x104>
 8cc:	13 82       	std	Z+3, r1	; 0x03
 8ce:	12 82       	std	Z+2, r1	; 0x02
 8d0:	b0 93 22 01 	sts	0x0122, r27	; 0x800122 <__brkval+0x1>
 8d4:	a0 93 21 01 	sts	0x0121, r26	; 0x800121 <__brkval>
 8d8:	df 91       	pop	r29
 8da:	cf 91       	pop	r28
 8dc:	08 95       	ret

000008de <strcmp>:
 8de:	fb 01       	movw	r30, r22
 8e0:	dc 01       	movw	r26, r24
 8e2:	8d 91       	ld	r24, X+
 8e4:	01 90       	ld	r0, Z+
 8e6:	80 19       	sub	r24, r0
 8e8:	01 10       	cpse	r0, r1
 8ea:	d9 f3       	breq	.-10     	; 0x8e2 <strcmp+0x4>
 8ec:	99 0b       	sbc	r25, r25
 8ee:	08 95       	ret

000008f0 <_exit>:
 8f0:	f8 94       	cli

000008f2 <__stop_program>:
 8f2:	ff cf       	rjmp	.-2      	; 0x8f2 <__stop_program>
